1 Introduction Deep learning models have achieved remarkable results in computer vision (Krizhevsky et al., 2012) and speech recognition (Graves et al., 2013) in recent years. 
Within natural language processing, much of the work with deep learning methods has involved learning word vector representations through neural language models (Bengio et al., 2003; Yih et al., 2011; Mikolov et al., 2013) and performing composition over the learned word vectors for classification (Collobert et al., 2011). 
Word vectors, wherein words are projected from a sparse, 1-of-V encoding (here V is the vocabulary size) onto a lower dimensional vector space via a hidden layer, are essentially feature extractors that encode semantic features of words in their dimensions. 
In such dense representations, semantically close words are likewise close—in euclidean or cosine distance—in the lower dimensional vector space. 
Convolutional neural networks (CNN) utilize layers with convolving filters that are applied to local features (LeCun et al., 1998). 
Originally invented for computer vision, CNN models have subsequently been shown to be effective for NLP and have achieved good results in semantic parsing (Yih et al., 2014), search query retrieval (Shen et al., 2014), sentence modeling (Kalchbrenner et al., 2014), and other traditional NLP tasks (Collobert et al., 2011). 
In the present work, we train a simple CNN with one layer of convolution on top of word vectors obtained from an unsupervised neural language model. 
These vectors were trained by Mikolov et al. (2013) on 100 billion words of Google News, and are publicly available. 
2 Model The model architecture, shown in figure 1, is a slight variant of the CNN architecture of Collobert et al. (2011). 
Let x i ∈ R k be the k-dimensional word vector corresponding to the i-th word in the sentence. 
A sentence of length n (zero-padded 1 https://code.google.com/p/word2vec/ arXiv:1408.5882v1 [cs.CL] 25 Aug 2014 wait for the video and do n't rent it n x k representation of sentence with static and non-static channels Convolutional layer with multiple filter widths and feature maps Max-over-time pooling Fully connected layer with dropout and softmax output Figure 1: Model architecture with multiple channels for an example sentence. 
Here the word vectors have dimensionality 6. where necessary) is represented as x 1:n = x 1 ⊕ x 2 ⊕ . 
. 
. 
⊕ x n , (1) where ⊕ is the concatenation operator. 
In general, let x i:i+j refer to the concatenation of words x i , x i+1 , . 
. 
. 
, x i+j . 
A convolution operation involves a filter w ∈ R h×k , which is applied to a window of h words to produce a new feature. 
For example, a feature c i is generated from a window of words x i:i+h−1 by c i = f(w · x i:i+h−1 + b). (2) Here b ∈ R is a bias term and f is a non-linear function such as the hyperbolic tangent. 
This filter is applied to each possible window of words in the sentence {x 1:h , x 2:h+1 , . 
. 
. 
, x n−h+1:n } to produce a feature map c = [c 1 , c 2 , . 
. 
. 
, c n−h+1 ], (3) with c ∈ R n−h+1 . 
We then apply a max-overtime pooling operation (Collobert et al., 2011) over the feature map and take the maximum value ˆc = max{c} as the feature corresponding to this particular filter. 
The idea is to capture the most important feature—one with the highest value—for each feature map. 
This pooling scheme naturally deals with variable sentence lengths. 
We have described the process by which one feature is extracted from one filter. 
The model uses multiple filters (with varying window sizes) to obtain multiple features. 
These features form the penultimate layer and are passed to a fully connected softmax layer whose output is the probability distribution over labels. 
In one of the model variants, we experiment with having two ‘channels’ of word vectors—one that is kept static throughout training and one that is fine-tuned via backpropagation (section 3.2). 2 In the multichannel architecture, illustrated in figure 1, each filter is applied to both channels and the results are added to calculate c i in equation (2). 
The model is otherwise equivalent to the single channel architecture. 
2.1 Regularization For regularization we employ dropout on the penultimate layer with a constraint on l 2 -norms of the weight vectors (Hinton et al., 2012). 
Dropout prevents co-adaptation of hidden units by randomly dropping out—i.e., setting to zero—a proportion p of the hidden units during fowardbackpropagation. 
That is, given the penultimate layer z = [ˆc 1 , . 
. 
. 
, ˆc m ] (note that here we have m filters), instead of using y = w · z + b (4) for output unit y in forward propagation, dropout uses y = w · (z ◦ r) + b, (5) where ◦ is the element-wise multiplication operator and r ∈ R m is a ‘masking’ vector of Bernoulli random variables with probability p of being 1. Gradients are backpropagated only through the unmasked units. 
At test time, the learned weight vectors are scaled by p such thatˆw = pw, and ˆw is used (without dropout) to score unseen sentences. 
We additionally constrain l 2 -norms of the weight vectors by rescaling w to have ||w|| 2 = s whenever ||w|| 2 > s after a gradient descent step. 
2 We employ language from computer vision where a color image has red, green, and blue channels. 
Data c l N |V | |V pre | Test MR-a 2 20 10662 18765 16448 CV MR-b 5 18 11855 17836 16262 2210 MR-c 2 19 9613 16185 14838 1821 Subj 2 23 10000 21323 17913 CV TREC 6 10 5952 9592 9125 500 CR 2 19 3775 5340 5046 CV MPQA 2 3 10606 6246 6083 CV Table 1: Summary statistics for the datasets after tokenization. 
c: Number of target classes. 
l: Average sentence length. 
N : Dataset size. 
|V |: Vocabulary size. 
|Vpre|: Number of words present in the set of pre-trained word vectors. 
Test: Test set size (CV means there was no standard train/test split and thus 10-fold CV was used). 
3 Datasets and Experimental Setup We test our model on various benchmarks. 
Summary statistics of the datasets are in table 1. • MR-a: Movie reviews with one sentence per review. 
Classification involves detecting positive/negative reviews (Pang and Lee, 2005). 
3 • MR-b: Extension of MR-a but with train /dev/test splits provided, and fine-grained labels (very positive, positive, neutral, negative, very negative). 
The reviews were relabeled by Socher et al. (2013). 
4 • MR-c: Same as MR-b but with neutral reviews removed and binary labels. 
• Subj: Subjectivity dataset where the task is to classify a sentence as being subjective or objective (Pang and Lee, 2004). 
• TREC: TREC question dataset—task involves classifying a question into 6 question types (whether the question is about person, location, numeric information, etc.) (Li and Roth, 2002). 
5 • CR: Customer reviews of various products (cameras, MP3s etc.). 
Task is to predict positive/negative reviews (Hu and Liu, 2004). 
6 3 https://www.cs.cornell.edu/people/pabo/movie-review-data/ 4 http://nlp.stanford.edu/sentiment/. 
Data is actually provided at the phrase-level and hence we train the model on both phrases and sentences but only score on sentences at test time, as in Socher et al. (2013), Kalchbrenner et al. (2014), and Le and Mikolov (2014). 
Thus the training set is an order of magnitude larger than listed in table 1 (138K for MR-b and 65K for MR-c). 
5 http://cogcomp.cs.illinois.edu/Data/QA/QC/ 6 http://www.cs.uic.edu/ liub/FBS/sentiment-analysis.html • MPQA: Opinion polarity detection subtask of the MPQA dataset (Wiebe et al., 2005). 
7 3.1 Hyperparameters and Training For all datasets we use: rectified linear units, filter windows (h) of 3, 4, 5 with 100 feature maps each, dropout rate (p) of 0.5, l 2 constraint (s) of 3, and mini-batch size of 50. These values were chosen via a grid search on the MR-c dev set. 
We do not otherwise perform any datasetspecific tuning other than early stopping on dev sets. 
For datasets without a standard dev set we randomly select 10% of the training data as the dev set. 
Training is done through stochastic gradient descent over shuffled mini-batches with the Adadelta update rule (Zeiler, 2012). 
3.2 Pre-trained Word Vectors Initializing word vectors with those obtained from an unsupervised neural language model is a popular method to improve performance in the absence of a large supervised training set (Collobert et al., 2011; Socher et al., 2011; Iyyer et al., 2014). 
We use the publicly available word2vec vectors that were trained on 100 billion words from Google News. 
The vectors have dimensionality of 300 and were trained using the continuous bag-of-words architecture (Mikolov et al., 2013). 
Words not present in the set of pre-trained words are initialized randomly. 
3.3 Model Variations We experiment with several variants of the model. 
• CNN-rand: Our baseline model where all words are randomly initialized and then modified during training. 
• CNN-static: A model with pre-trained vectors from word2vec. 
All words— including the unknown ones that are randomly initialized—are kept static and only the other parameters of the model are learned. 
• CNN-non-static: Same as above but the pretrained vectors are fine-tuned for each task. 
• CNN-multichannel: A model with two sets of word vectors. 
Each set of vectors is treated as a ‘channel’ and each filter is applied 7 http://www.cs.pitt.edu/mpqa/ Model MR-a MR-b MR-c Subj TREC CR MPQA CNN-rand 76.1 45.0 82.7 89.6 91.2 79.8 83.4 CNN-static 81.0 45.5 86.8 93.0 92.8 84.7 89.6 CNN-non-static 81.5 48.0 87.2 93.4 93.6 84.3 89.5 CNN-multichannel 81.1 47.4 88.1 93.2 92.2 85.0 89.4 RAE (Socher et al., 2011) 77.7 43.2 82.4 − − − 86.4 MV-RNN (Socher et al., 2012) 79.0 44.4 82.9 − − − − RNTN (Socher et al., 2013) − 45.7 85.4 − − − − DCNN (Kalchbrenner et al., 2014) − 48.5 86.8 − 93.0 − − Paragraph-Vec (Le and Mikolov, 2014) − 48.7 87.8 − − − − CCAE (Hermann and Blunsom, 2013) 77.8 − − − − − 87.2 Sent-Parser (Dong et al., 2014) 79.5 − − − − − 86.3 NBSVM (Wang and Manning, 2012) 79.4 − − 93.2 − 81.8 86.3 MNB (Wang and Manning, 2012) 79.0 − − 93.6 − 80.0 86.3 G-Dropout (Wang and Manning, 2013) 79.0 − − 93.4 − 82.1 86.1 F-Dropout (Wang and Manning, 2013) 79.1 − − 93.6 − 81.9 86.3 Tree-CRF (Nakagawa et al., 2010) 77.3 − − − − 81.4 86.1 CRF-PR (Yang and Cardie, 2014) − − − − − 82.7 − SVM S (Silva et al., 2011) − − − − 95.0 − − Table 2: Results of our CNN models against other methods. 
RAE: Recursive Autoencoders with pre-trained word vectors from Wikipedia (Socher et al., 2011). 
MV-RNN: Matrix-Vector Recursive Neural Network with parse trees (Socher et al., 2012). 
RNTN: Recursive Neural Tensor Network with tensor-based feature function and parse trees (Socher et al., 2013). 
DCNN: Dynamic Convolutional Neural Network with k-max pooling (Kalchbrenner et al., 2014). 
Paragraph-Vec: Logistic regression on top of paragraph vectors (Le and Mikolov, 2014). 
CCAE: Combinatorial Category Autoencoders with combinatorial category grammar operators (Hermann and Blunsom, 2013). 
Sent-Parser: Sentiment analysis-specific parser (Dong et al., 2014). 
NBSVM, MNB: Naive Bayes SVM and Multinomial Naive Bayes with uni-bigrams from Wang and Manning (2012). 
G-Dropout, F-Dropout: Gaussian Dropout and Fast Dropout from Wang and Manning (2013). 
Tree-CRF: Dependency tree with Conditional Random Fields (Nakagawa et al., 2010). 
CRF-PR: Conditional Random Fields with Posterior Regularization (Yang and Cardie, 2014). 
SVM S : SVM with uni-bi-trigrams, wh word, head word, POS, parser, hypernyms, and 60 hand-coded rules as features from Silva et al. (2011). 
to both channels, but gradients are backpropagated only through one of the channels. 
Hence the model is able to fine-tune one set of vectors while keeping the other static. 
Both channels are initialized with word2vec. 
In order to disentangle the effect of the above variations versus other random factors, we eliminate other sources of randomness—CV-fold assignment, initialization of unknown word vectors, initialization of CNN parameters—by keeping them uniform within each dataset. 
4 Results and Discussion Results of our models against other methods are listed in table 2. Our baseline model with all randomly initialized words (CNN-rand) does not perform well. 
While we had expected performance gains through the use of pre-trained vectors, we were surprised at the magnitude of the gains. 
Even a simple model with static vectors (CNN-static) performs remarkably well, giving competitive results against the more sophisticated deep learning models that utilize complex pooling schemes (Kalchbrenner et al., 2014) or require parse trees to be computed beforehand (Socher et al., 2013). 
These results suggest that the pre-trained vectors are good, ‘universal’ feature extractors and can be utilized across datasets. 
Fine-tuning the pretrained vectors for each task gives still further improvements (CNN-non-static). 
4.1 Multichannel vs. Single Channel Models We had initially hoped that the multichannel model would offer a compromise between static and non-static vectors and thus work better than the single channel model, especially on smaller datasets. 
However, the results are inconclusive. 
Further experiments on combining static and nonstatic vectors may be warranted. 
For instance, instead of using an additional channel for the nonstatic portion, one could maintain a single channel but have some dimensions that are kept static and some dimensions that are allowed to be fine-tuned during training. 
Most Similar Words for Static Channel Non-static Channel bad good terrible terrible horrible horrible lousy lousy stupid good great nice bad decent terrific solid decent terrific n’t os not ca never ireland nothing wo neither ! 
2,500 2,500 entire lush jez beautiful changer terrific , decasia but abysmally dragon demise a valiant and Table 3: Top 4 neighboring words—based on cosine similarity—for vectors in the static channel (left) and finetuned vectors in the non-static channel (right) from the multichannel model on the MR-c dataset after training. 
4.2 Static vs. Non-static Representations The multichannel model is able to fine-tune the non-static channel to make it more specific to the task-at-hand (as is the case with the single channel non-static model). 
For example, good is most similar to bad in word2vec, presumably because they are (almost) syntactically equivalent. 
But for vectors in the non-static channel that were finetuned on the MR-c dataset, this is no longer the case (table 3). Similarly, good is arguably closer to nice than it is to great for expressing sentiment, and this is indeed reflected in the learned vectors. 
For (randomly initialized) tokens not in the set of pre-trained vectors, fine-tuning allows them to learn more meaningful representations: the network learns that exclamation marks are associated with effusive expressions and that commas are conjunctive (table 3). 4.3 Further Observations We report on some further experiments and observations: • Kalchbrenner et al. (2014) report much worse results with a CNN that has essentially the same architecture as our single channel model. 
For example, their Max-TDNN (Time Delay Neural Network) with randomly initialized words obtains 37.4% on the MR-b dataset, compared to 45.0% for our model. 
We attribute such discrepancy to our CNN having much more capacity (multiple filter widths and feature maps). 
• Dropout proved to be such a good regularizer that it was fine to use a larger than necessary network and simply let dropout regularize it. Dropout consistently added 2%–4% relative performance. 
• When randomly initializing words not in word2vec, we obtained slight improvements by sampling each dimension from U[−a, a] where a was chosen such that the randomly initialized vectors have the same variance as the pre-trained ones. 
It would be interesting to see if employing more sophisticated methods to mirror the distribution of pre-trained vectors in the initialization process gives further improvements. 
• We briefly experimented with another set of publicly available word vectors trained by Collobert et al. (2011) on Wikipedia, 8 and found that word2vec gave far superior performance. 
It is not clear whether this is due to Mikolov et al. (2013)’s architecture or the 100 billion word Google News dataset. 
• Adadelta (Zeiler, 2012) gave similar results to Adagrad (Duchi et al., 2011) but required fewer epochs. 
5 Conclusion In the present work we have described a series of experiments with convolutional neural networks built on top of word2vec. 
Despite little tuning of hyperparameters, a simple CNN with one layer of convolution performs remarkably well. 
Our results add to the well-established evidence that pretraining of word vectors is an important ingredient in deep learning for NLP. 
Acknowledgments We would like to thank Yann LeCun and the anonymous reviewers for their helpful feedback and suggestions. 
8 http://ronan.collobert.com/senna/ References Y. Bengio, R. Ducharme, P. Vincent. 
2003. 
Neural Probabilitistic Language Model. 
Journal of Machine Learning Research 3:1137–1155. 
R. Collobert, J. Weston, L. Bottou, M. Karlen, K. Kavukcuglu, P. Kuksa. 
2011. 
Natural Language Processing (Almost) from Scratch. 
Journal of Machine Learning Research 12:2493–2537. 
J. Duchi, E. Hazan, Y. Singer. 
2011 Adaptive subgradient methods for online learning and stochastic optimization. 
Journal of Machine Learning Research, 12:2121–2159. 
L. Dong, F. Wei, S. Liu, M. Zhou, K. Xu. 2014. 
A Statistical Parsing Framework for Sentiment Classification. 
CoRR, abs/1401.6330. 
A. Graves, A. Mohamed, G. Hinton. 
2013. 
Speech recognition with deep recurrent neural networks. 
In Proceedings of ICASSP 2013. 
G. Hinton, N. Srivastava, A. Krizhevsky, I. Sutskever, R. Salakhutdinov. 
2012. 
Improving neural networks by preventing co-adaptation of feature detectors. 
CoRR, abs/1207.0580. 
K. Hermann, P. Blunsom. 
2013. 
The Role of Syntax in Vector Space Models of Compositional Semantics. 
In Proceedings of ACL 2013. 
M. Hu, B. Liu. 
2004. 
Mining and Summarizing Customer Reviews. 
In Proceedings of ACM SIGKDD 2004. 
M. Iyyer, P. Enns, J. Boyd-Graber, P. Resnik 2014. 
Political Ideology Detection Using Recursive Neural Networks. 
In Proceedings of ACL 2014. 
N. Kalchbrenner, E. Grefenstette, P. Blunsom. 
2014. 
A Convolutional Neural Network for Modelling Sentences. 
In Proceedings of ACL 2014. 
A. Krizhevsky, I. Sutskever, G. Hinton. 
2012. 
ImageNet Classification with Deep Convolutional Neural Networks. 
In Proceedings of NIPS 2012. 
Q. Le, T. Mikolov. 
2014. 
Distributed Represenations of Sentences and Documents. 
In Proceedings of ICML 2014. 
Y. LeCun, L. Bottou, Y. Bengio, P. Haffner. 
1998. 
Gradient-based learning applied to document recognition. 
In Proceedings of the IEEE, 86(11):2278– 2324, November. 
X. Li, D. Roth. 
2002. 
Learning Question Classifiers. 
In Proceedings of ACL 2002. 
T. Mikolov, I. Sutskever, K. Chen, G. Corrado, J. Dean. 
2013. 
Distributed Representations of Words and Phrases and their Compositionality. 
In Proceedings of NIPS 2013. 
T. Nakagawa, K. Inui, S. Kurohashi. 
2010. 
Dependency tree-based sentiment classification using CRFs with hidden variables. 
In Proceedings of ACL 2010. 
B. Pang, L. Lee. 
2004. 
A sentimental education: Sentiment analysis using subjectivity summarization based on minimum cuts. 
In Proceedings of ACL 2004. 
B. Pang, L. Lee. 
2005. 
Seeing stars: Exploiting class relationships for sentiment categorization with respect to rating scales. 
In Proceedings of ACL 2005. 
A.S. 
Razavian, H. Azizpour, J. Sullivan, S. Carlsson 2014. 
CNN Features off-the-shelf: an Astounding Baseline. 
CoRR, abs/1403.6382. 
Y. Shen, X. He, J. Gao, L. Deng, G. Mesnil. 
2014. 
Learning Semantic Representations Using Convolutional Neural Networks for Web Search. 
In Proceedings of WWW 2014. 
J. Silva, L. Coheur, A. Mendes, A. Wichert. 
2011. 
From symbolic to sub-symbolic information in question classification. 
Artificial Intelligence Review, 35(2):137–154. 
R. Socher, J. Pennington, E. Huang, A. Ng, C. Manning. 
2011. 
Semi-Supervised Recursive Autoencoders for Predicting Sentiment Distributions. 
In Proceedings of EMNLP 2011. 
R. Socher, B. Huval, C. Manning, A. Ng. 2012. 
Semantic Compositionality through Recursive MatrixVector Spaces. 
In Proceedings of EMNLP 2012. 
R. Socher, A. Perelygin, J. Wu, J. Chuang, C. Manning, A. Ng, C. Potts. 
2013. 
Recursive Deep Models for Semantic Compositionality Over a Sentiment Treebank. 
In Proceedings of EMNLP 2013. 
J. Wiebe, T. Wilson, C. Cardie. 
2005. 
Annotating Expressions of Opinions and Emotions in Language. 
Language Resources and Evaluation, 39(2-3): 165– 210. 
S. Wang, C. Manning. 
2012. 
Baselines and Bigrams: Simple, Good Sentiment and Topic Classification. 
In Proceedings of ACL 2012. 
S. Wang, C. Manning. 
2013. 
Fast Dropout Training. 
In Proceedings of ICML 2013. 
B. Yang, C. Cardie. 
2014. 
Context-aware Learning for Sentence-level Sentiment Analysis with Posterior Regularization. 
In Proceedings of ACL 2014. 
W. Yih, K. Toutanova, J. Platt, C. Meek. 
2011. 
Learning Discriminative Projections for Text Similarity Measures. 
Proceedings of the Fifteenth Conference on Computational Natural Language Learning, 247–256. 
W. Yih, X. He, C. Meek. 
2014. 
Semantic Parsing for Single-Relation Question Answering. 
In Proceedings of ACL 2014. 
M. Zeiler. 
2012. 
Adadelta: An adaptive learning rate method. 
CoRR, abs/1212.5701. 