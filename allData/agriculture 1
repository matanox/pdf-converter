Keywords Traveling salesman problem · Clusters · Heuristics Mathematics Subject Classification (2000) 90B06 1 Introduction Vehicle routing and packing problems have been widely studied in the literature due to their great importance in logistics and transportation and their numerous applications to real life situations. 
Both kinds of problems come out in planning processes in logistics and their optimization is crucial to effectively reduce costs. 
Due to their high complexity most approaches of the literature consider vehicle routing and packA. 
Felipe · M. T. Ortuño · G. Tirado (B) Depto. 
Estadística e IO, University Complutense of Madrid, Plaza de Ciencias 3, 28040, Madrid, Spain e-mail: gregoriotd@mat.ucm.es 246 A. Felipe et al. ing problems independently. 
However, routing decisions affect loading operations and vice versa, and this dependence is becoming more and more important. 
As a result, the combination of vehicle routing and loading problems into a single joint optimization problem has recently been receiving an increasing attention. 
One of the first problems to be considered in the literature combining routing and loading issues was the Traveling Salesman Problem with Pickup and Delivery and LIFO loading (TSPPDL), in which Last-In-First-Out loading conditions were added to the classical TSP with Pickup and Delivery. 
Both exact approaches (Carrabs et al. 2007a; Cordeau et al. 2010) and heuristics (Carrabs et al. 2007b; Cassani and Righini 2004) are available in the literature. 
After that more complex problems considering heterogeneous items and different kinds of loading constraints in 2 or 3 dimensions have also been considered in the literature (see for instance Doerner et al. 2007; Gendreau et al. 2006, 2008; Iori et al. 2007). 
The problem we approach in this paper, the Double Traveling Salesman Problem with Multiple Stacks (DTSPMS), was introduced recently in Petersen and Madsen (2009) and also lies into this kind of problems mixing routing and loading conditions. 
The DTSPMS consists on serving a set of orders, determined by a pickup location, where some goods must be picked up, and a delivery location, where those goods must be delivered, at minimum cost. All pickup locations are placed in one region and all delivery locations are placed in another region that is far away from the first one. 
Then, a pickup route and a delivery route visiting all pickup and delivery locations, respectively, must be determined, assuming that the intermediate transportation between the depot of the pickup region and the depot of the delivery region is constant. 
The container of the single vehicle available for transportation, that is rear-loaded, is divided into several compartments, allowing the items to be organized in several independent rows. 
Furthermore, for safety and insurance reasons repacking is not allowed during pickups or deliveries. 
As a consequence, each row behaves as a LIFO stack (Last-In-First-Out), inducing the appearance of some precedence constraints on the items to be collected. 
The available containers have fixed dimensions, so the number of available stacks and their capacity are also fixed. 
In real life situations the items to be picked up and delivered are usually Standard Pallets, which can store different kinds of products but have standard dimensions. 
For this reason, it will be assumed that all items are uniform and each order consists of one single item. 
The objective, as stated before, is to find a feasible solution in which the sum of total traveled distances in both regions is minimized. 
An instance of the DTSPMS is determined by the n orders to be served, the distance matrices C 1 = (c 1 ij ) and C 2 = (c 2 ij ) of the pickup and delivery regions, respectively, and the number m of available stacks together with their maximum capacity Q.Let D ={1,...,n} be the set of orders (the depot is represented by 0) and P ={1,...,m} the set of available stacks. 
A feasible solution for the problem consists of a pickup route π 1 , a delivery route π 2 and a stack assignment λ, where π 1 ,π 2 are permutations of D and λ is an application from D to P. With this notation, a formal definition of the problem is the following: min 2  δ=1  c δ 0,π δ (1) + n−1  i=1 c δ π δ (i),π δ (i+1) + c δ π δ (n),0  An adapted heuristic approach for a clustered vrp with loading constraints 247 subject to   λ −1 (k)   ≤ Q ∀k ∈ P (1) π −1 1 (u)<π −1 1 (v) ⇔ π −1 2 (u)>π −1 2 (v) ∀u,v ∈ D, u = v, λ(u) = λ(v) (2) where constraints (1) ensure that the maximum capacity of the stacks is not exceeded and constraints (2) impose the LIFO precedence conditions. 
The DTSPMS generalizes the TSP and thus it is NP-hard as well. 
Several exact approaches are proposed in Petersen et al. (2010); Lusby et al. (2010); Carrabs et al. (2010); Alba et al. (2011) which can be used to solve to optimality small instances (up to 24 orders) with different number of stacks but are unable to solve medium-sized instances. 
To deal with real-sized instances several heuristics have been presented in Petersen and Madsen (2009), were the authors propose heuristics based on Iterated Local Search, Tabu Search, Simulated Annealing and Large Neighborhood Search, and (Felipe et al. 2009), where several neighborhood structures adapted to the problem are embedded into a Variable Neighborhood Search (VNS) approach. 
Some interesting properties concerning the complexity of some subproblems of the DTSPMS are studied in Cassaza et al. (2009), where a fast heuristic for the problem is also proposed. 
In Felipe et al. (2011) the authors develop an algorithm called Exterior Hybridized Variable Neighborhood Search (EXT-VNS), combining the VNS of Felipe et al. (2009) with a local search procedure using intermediate infeasible solutions. 
A generalization of the DTSPMS in which pickups and deliveries can be performed jointly in a single route is approached in Cotè et al. (2009), where a Large Neighborhood Search algorithm that can also be applied to the DTSPMS as a particular case is presented. 
Most of the literature approaching vehicle routing and loading problems in general, and the DTSPMS in particular, solve instances that are generated without any special structure, considering locations that are usually uniformly generated on a given region. 
However, this is not always realistic. 
In this paper we introduce and develop some ideas to deal with real life situations in which the customers are not uniformly distributed on the pickup or delivery regions of the problem and take advantage of this special structure. 
A new procedure to generate initial solutions is proposed and several adapted neighborhood structures to improve the local search are developed. 
These new features are embedded into the EXT-VNS framework proposed by the authors in Felipe et al. (2011), obtaining an adapted and effective heuristic that shows a good performance on several new sets of instances with different characteristics that represent real situations that had not been considered before for this problem. 
These new ideas concerning the consideration of the special structure of the problem could also be extended to other similar routing problems with loading and precedence constraints, paying special attention to their particular characteristics to adapt the provided general framework appropriately and take advantage of their special features. 
The remainder of this paper is organized as follows. 
Section 2 presents a new procedure to generate initial solutions for the problem taking advantage of the information regarding the distribution of the customers and Sect. 
3 introduces some new neighborhood structures adapted to deal with clusters and aimed to guide effectively the local search process. 
In Sect. 
4 the implementation details of the algorithm built using the 248 A. Felipe et al. elements developed in the two previous sections are provided and in Sect. 
5 the new clustered instances generated for evaluation of the proposed heuristic are described in detail, discussing their motivation and real life applications. 
The computational results obtained for the test instances are presented and analyzed in Sect. 
6 and finally Sect. 
7 draws some conclusions from this work. 
2 Procedure to generate initial solutions In Felipe et al. (2009); Petersen and Madsen (2009) several procedures to generate initial feasible solutions for the DTSPMS have already been proposed, but none of them take into account any information regarding the structure of the instance to be solved. 
In this section a new procedure that takes advantage of the clustered structure of the instances to be solved, if it is the case, will be proposed. 
In what follows let m be the number of stacks of the problem. 
To obtain a pickup (delivery) tour in a pickup (delivery) region with several clusters, first a classical TSP is solved on each cluster, obtaining a partial tour visiting the locations belonging to each cluster. 
The corresponding TSPs can be solved using an exact approach, but to reduce the complexity of the procedure they are usually solved by a fast heuristic, as for instance a greedy algorithm followed by a local search 2-opt procedure. 
Once a tour for each cluster is obtained a feasible tour for the original region is constructed by joining all partial tours: the closest location to the depot is visited first and then the tour associated to its cluster is followed until all locations on that cluster are visited; then the last visited location is connected to the closest remaining location, iterating this process until there are no clusters left to be visited and the tour finishes returning to the depot. 
This procedure allows the obtaining of a reasonable pickup or delivery tour with a small computational effort. 
Once one of the routes of the solution (pickup or delivery) is created the loading plan is iteratively designed considering the locations in the order given by the route that is fixed. 
At each step, the current order is assigned to the stack storing the maximum number of already scheduled orders belonging to the same cluster; if that stack is full then it is assigned to the one storing the second maximum, and so on; if all of them are full or the current order is the first considered order belonging to its cluster then it is assigned to the stack with the minimum number of orders already assigned to it. This procedure allows the obtaining of a loading plan based on loading orders of the same cluster into the same stack. 
Once one of the routes of the solution (pickup or delivery) and the loading plan are fixed, the exact position of each order in the container of the vehicle is known and thus at most m orders are available to be picked up or delivered at each step of the second route. 
This route is then constructed following a guided greedy procedure: at each step, if possible, move to the closest available location belonging to the same cluster of the current one, and if none of the (at most m) available locations belong to the same cluster move directly to the closest one. 
The two routes and the loading plan obtained with this procedure form an initial feasible solution verifying all precedence and loading constraints of the problem. 
An adapted heuristic approach for a clustered vrp with loading constraints 249 A short pseudocode of the procedure to generate initial solutions is presented next. 
The pickup tour is constructed first, but note that the algorithm in which the delivery tour is constructed first is analogous. 
Algorithm 1 Construction of an initial solution. 
1. Pickup tour. 
1.1. 
Solve a TSP on each cluster (greedy + 2-opt). 
1.2. 
Build a complete tour T 1 joining subtours of each cluster. 
2. Loading plan. 
Follow T 1 and assign each order to the stack with the maximum number of orders belonging to the same cluster. 
3. Delivery tour. 
Build the delivery tour T 2 following T 1 in reversed order serving iteratively the closest available order. 
3 Neighborhood structures for clustered instances The DTSPMS has already been approached in the literature using different heuristics based on several neighborhood structures to define local search procedures. 
In Petersen and Madsen (2009) two neighborhood structures defining moves both on the routing and the loading parts of the solutions were introduced and in Felipe et al. (2009) four additional neighborhood structures defining more complex moves were proposed and combined into a Variable Neighborhood Search heuristic. 
However, none of the neighborhood structures available in the literature take into account the structure of the problem to be solved and in particular real life situations in which the customers are not uniformly distributed on the pickup or delivery regions and thus several clusters of locations are created. 
In this section we propose some new neighborhood structures that do consider this kind of special situations, leading to local search procedures that are more effective to solve clustered instances. 
For the definition of moves and neighborhood structures, a representation of solutions in terms of applications and permutations will be used. 
In what follows the set of all feasible solutions for the DTSPMS will be denoted by X and a feasible solution S ∈ X will be represented by (π 1 ,π 2 ,λ), where π 1 is associated to the pickup route, π 2 to the delivery route and λ to the stack assignment. 
π 1 ,π 2 are permutations of the set of orders D and λ is an application that assigns a stack to every order. 
The structure of the instance to be solved is represented by two applications ψ 1 ,ψ 2 such that for each pair u,v ∈ D it holds that ψ i (u) = ψ i (v) if and only if u and v belong to the same cluster in region i (pickup region if i = 1 and delivery region if i = 2). A complete swap move consists on swapping the positions of two orders assigned to different stacks, leading to a change both in the routes and in the loading plan. 
Usually all pairs of orders are considered and the move determined by each of them is evaluated, but the existence of clusters gives some additional information that can be used to reduce the search to a smaller subset of potentially good pairs. 
Hence, considering complete swap as the basic move, two complementary moves are defined. 
To obtain simpler move definitions, let us define operator F j i first. Let A be any set, let i, j ∈ A be two elements of that set and let 250 A. Felipe et al. F j i =  f : A f −→ B f | i, j ∈ Dom( f ) ⊂ A f  be the set formed by every application whose domain contains elements i and j.The operator I j i : F j i −→ F j i f −→ I j i ( f ) : A f −→ B f assigns to an application f ∈ F j i another application g = I j i ( f ) with the same domain and image as f that is defined as g(i) = f ( j), g( j) = f (i) and g(k) = f (k) ∀k ∈ A f \{i, j}. Application g coincides with f in every element belonging to their domain except i and j, and the images of these two elements are swapped in g. Making use of operator F j i , two complementary moves based on complete swap are defined. 
Let S = (π 1 ,π 2 ,λ) ∈ X be a feasible solution for the DTSPMS. 
The INTRA-cluster Complete Swap neighborhood of S is INTRA-CS(S) =  ˆπ1, ˆπ2, ˆ λ  ∈ X   ∃u,v ∈ D, ∃δ ∈{1, 2} s.t. λ(u) = λ(v), ψ δ (u) = ψ δ (v), ˆ λ = I v u (λ), ˆπ 1 = I j 1 i 1 (π 1 ), ˆπ 2 = I j 2 i 2 (π 2 )  where i 1 = π −1 1 (u), i 2 = π −1 2 (u), j 1 = π −1 1 (v), j 2 = π −1 2 (v). 
Analogously, the INTER-cluster Complete Swap neighborhood of S is INTER-CS(S) =  ˆπ 1 , ˆπ 2 , ˆ λ  ∈ X   ∃u,v ∈ D s.t. λ(u) = λ(v), ψ δ (u) = ψ δ (v) ∀δ ∈{1, 2}, ˆ λ = I v u (λ), ˆπ 1 = I j 1 i 1 (π 1 ), ˆπ 2 = I j 2 i 2 (π 2 )  where i 1 = π −1 1 (u), i 2 = π −1 2 (u), j 1 = π −1 1 (v), j 2 = π −1 2 (v). 
INTRA-cluster Complete Swap is a complete swap move performed inside acluster, considering only pairs of orders belonging to the same cluster in one of the regions of the problem. 
On the contrary, INTER-cluster Complete Swap is a complete swap move performed between different clusters, considering only pairs of orders belonging to different clusters in the two regions of the problem. 
An INTRA-CS or INTER-CS operation is determined by a pair of orders assigned to different stacks and thus the size of neighborhoods INTRA-CS(S) and INTER-CS(S) is at most O(n 2 ). On the one hand, the INTRA-CS neighborhood structure is aimed to perform an intensification process where only the visits between locations of the same cluster are optimized; on the other hand, the INTER-CS neighborhood structure is aimed to perform a diversification process swapping positions of orders belonging to different clusters and thus far away from one another. 
This division into two separate phases takes advantage of the clustered structure and can improve the performance of the search process. 
An adapted heuristic approach for a clustered vrp with loading constraints 251 An in-stack swap move consists on swapping the positions of two orders assigned to the same stack, leading to a change both in the routes and in the loading plan of the solution but in a different way as a complete swap move does, since now the swapped orders remain assigned to the same stack and only their positions in the container of the vehicle changes. 
As in the previous case, all pairs of orders are usually considered and the move determined by each of them is evaluated, but using the additional information given by the clusters two complementary moves performed on two pair subsets are defined. 
Let S = (π 1 ,π 2 ,λ) ∈ X be a feasible solution for the DTSPMS. 
The INTRAcluster In-Stack Swap neighborhood of S is INTRA-ISS(S) =  ˆπ 1 , ˆπ 2 , ˆ λ  ∈ X  ˆ λ = λ, ∃u,v ∈ D, ∃δ ∈{1, 2} s.t. ˆπ 1 = I j 1 i 1 (π 1 ), ˆπ 2 = I j 2 i 2 (π 2 ), ψ δ (u) = ψ δ (v)  where i 1 = π −1 1 (u), i 2 = π −1 2 (u), j 1 = π −1 1 (v), j 2 = π −1 2 (v). 
Analogously, the INTER-cluster In-Stack Swap neighborhood of S is INTER-ISS(S) =  ˆπ 1 , ˆπ 2 , ˆ λ  ∈ X   ˆ λ = λ, ∃u,v ∈ D s.t. ˆπ 1 = I j 1 i 1 (π 1 ), ˆπ 2 = I j 2 i 2 (π 2 ), ψ δ (u) = ψ δ (v) ∀δ ∈{1, 2}  where i1= π −1 1 (u), i2= π −1 2 (u), j1= π −1 1 (v), j2= π −1 2 (v). 
INTRA-cluster In-Stack Swap is an in-stack swap move performed inside acluster, considering only pairs of orders belonging to the same cluster in one of the regions of the problem. 
On the contrary, INTER-cluster In-Stack Swap is an in-stack swap move performed between clusters, considering only pairs of orders belonging to different clusters in both regions of the problem. 
An INTRA-ISS or INTER-ISS operation is also determined by one pair of orders, now assigned to the same stack, and thus the size of neighborhoods INTRA-ISS(S) and INTER-ISS(S)isatmostO(n 2 ) as well. 
In the same way as it is done with INTRA-CS and INTER-CS, the INTRA-ISS neighborhood structure is aimed at performing an intensification process on the solution and the INTER-ISS to perform a diversification process. 
This division is aimed again at improving the performance of the search process. 
4 Adapted heuristic and implementation details The procedure introduced in Sect. 
2 to generate initial solutions and the neighborhood structures introduced in Sect. 
3 to improve the local search process are embedded into an EXT-VNS framework similar to the one proposed in Felipe et al. (2011) to obtain an adapted and effective heuristic dealing with different real situations. 
In this new version the initial solutions are constructed taking into account the information available about the distribution of the orders and CS and ISS neighborhood structures are 252 A. Felipe et al. replaced by INTRA-CS, INTER-CS, INTRA-ISS and INTER-ISS in order to manage clustered instances more efficiently. 
A short pseudocode of the core of the proposed algorithm is presented next. 
Algorithm 2 Clustered VNS (C-VNS). 
1. Initialization: Generate initial solution S using Algorithm 1.S ∗ = S. 2. Intensification: Perform a Variable Neighborhood Search with initial solution S using all neighborhood structures (including structures of Sect. 
3). As a result a local optimum ¯ S is obtained. 
3. Best solution update: If cost( ¯ S)<cost(S ∗ ),S ∗ = ¯ S. 4. Diversification: Make some perturbation moves on solution ¯ S and perform some iterations of the Exterior Search obtaining a new solution S. 5. Stop check: If the maximum running time allowed is reached, STOP: the best solution found is S ∗ .Otherwise,gotostep2. 
The previous pseudocode shows that the procedure to generate initial solutions introduced in Sect. 
2 is used in the Initialization of the algorithm (step 1) and the neighborhood structures introduced in Sect. 
3 are used in the VNS for Intensification (step 2). In a DTSPMS instance with clusters the distances between cargoes belonging to different clusters use to be quite larger than between cargoes belonging to the same cluster. 
As a result, good solutions will tend to use as few links as possible connecting clusters, and thus in some situations swap moves concerning orders of different clusters become less effective and are only useful in terms of diversification. 
This makes it interesting to consider the idea of using them less often so that computing time is saved to be used to explore the other neighborhood structures. 
To achieve this, every time a VNS is performed at step 2 the algorithm decides whether the neighborhood structures INTER-CS and INTER-ISS (that are based on moves between orders belonging to different clusters) are used or not according to some probabilities. 
This feature is controlled by a fixed parameter ρ ∈[0, 1], given as input, that represents the probability of performing a search on the structures INTER-CS and INTER-ISS. 
If ρ is close to 1 those two structures will be used often in the search together with all the others, but if it is close to 0 they will used less often, saving computing time that is used by other neighborhood structures exploiting more interesting parts of the solution. 
The algorithm performs a local search procedure using intermediate infeasible solutions that is specifically adapted to situations in which the customers are not uniformly distributed. 
Furthermore, the new features of this algorithm concerning the consideration of the special structure of the problem could be extended to other similar routing problems, taking into account their particular characteristics to adapt the provided general framework appropriately. 
In the next section the sets of instances used to evaluate the performance of the proposed algorithm are described in detail and in Sect. 
6 the computational results obtained on these instances are presented and analyzed. 
An adapted heuristic approach for a clustered vrp with loading constraints 253 5 Description of clustered instances We have generated 15 sets of instances with 3 different sizes (33, 66 and 132 orders) and 5 different configurations of orders, leading to the creation of clusters with distinctive characteristics in both regions of the problem. 
In the real life application that originally motivated the problem, the container of the vehicles could load 33 Standard Pallets when organized in 3 rows of length 11. This is the reason why the first instances that were generated in Petersen and Madsen (2009) for the DTSPMS had 33 pickup and delivery locations and used 3 stacks of capacity 11. Later on, in order to evaluate the performance of heuristics on larger instances, several new sets of instances were generated by simply doubling or quadrupling the size of the original 33-order instances and using stacks with tight capacity. 
Each configuration is designed to represent one practical situation in real life, in which usually the orders are not uniformly distributed but are concentrated following some distributions. 
Next we give the details of each set of instances. 
In what follows we will denote by [a, b]×[c, d] the rectangular area whose bottom left corner is in [a, b] and whose top right corner is in [c, d]. 5.1 Clusters only on the delivery region On the instances of this set the pickup locations are uniformly generated on the square [−100,100]×[−100,100] and the delivery locations are organized in 3 clusters on the squares [−25,25]×[50,100], [50,100]×[−100,−50] and [−100,−50]×[−100,−50]. 
Each cluster contains the same number of locations, that are randomly generated on the corresponding square. 
The depot of each region is centrally located at the origin (0,0). 
The instances of this set represent the realistic situation in which the customers sending products belong to a big city, in which the collection points are approximately uniformly distributed, or to a region having small towns with a collection location each (one big square of locations), but the customers receiving the products are located in a few specific regions with approximately the same number of demanding locations (three smaller squares of locations), where each region may be a medium-sized city or contain several small towns that are close to each other. 
The opposite situation, having clusters on the pickup region and uniformly distributed customers on the delivery region, is symmetric and can be approached in an analogous way since an equivalent instance is obtained swapping pickup and delivery regions. 
This set of instances will be referred to as CODR (Clusters Only on the Delivery Region). 
We will consider one set with 33 orders (CODR33), another set with 66 orders (CODR66) and another one with 132 orders (CODR132). 
5.2 Uncoupled clusters on both regions In this case both the pickup locations and the delivery locations are organized in 3 clusters on the squares [−25,25]×[50,100], [50,100]×[−100,−50] and [−100,−50]× [−100,−50]. 
Each cluster contains the same number of locations, that are randomly 254 A. Felipe et al. generated on the corresponding square. 
The depot of each region is centrally located at the origin (0,0). 
The pairs (pickup customer, delivery customer) determining the origin and destination of each item to be transported are generated randomly without taking into account any information concerning the clusters each customer belongs to. As a consequence, there is not any relationship between pickup and delivery clusters. 
The instances of this set represent the realistic situation in which both the pickup and the delivery regions have several customer concentration points and the sending of products may be requested between any pair of them. 
This set of instances will be referred to as UCBR (Uncoupled Clusters on Both Regions). 
We will consider one set with 33 orders (UCBR33), another set with 66 orders (UCBR66) and another one with 132 orders (UCBR132). 
5.3 Coupled clusters on both regions The pickup and delivery locations of the instances of this set are borrowed from the set UCBR, but now the pairs (pickup customer, delivery customer) determining the origin and destination of each item to be transported are not completely random. 
There are 3 clusters on each region with the same number of customers that now will be assumed to be coupled, in such a way that the products to be collected at the locations of one pickup cluster must be delivered at the locations of the same delivery cluster. 
This means that if the pickup clusters are (P 1 , P 2 , P 3 ) and the delivery clusters are (D 1 , D 2 , D 3 ), being P i coupled with D i , the delivery locations associated to the pickup locations in P i must belong to D i . 
The depot of both regions are centrally located at the origin (0,0). 
The instances of this set also represent the realistic situation in which both the pickup and the delivery regions have several customer concentration points, but now the sending of products is only requested between locations belonging to coupled concentration points. 
This happens in real life when the number of orders to be attended is large enough so that they can be grouped in several sets in which the pickup locations are close to each other and also the corresponding delivery locations are close to each other. 
This set of instances will be referred to as CCBR (Coupled Clusters on Both Regions). 
In this kind of instances it seems natural to pickup consecutively all the orders corresponding to each concentration point and do the same with the deliveries, since they are coupled and highly related. 
This is not necessarily the case in practice, but usually it makes these instances be easier to solve. 
We will consider one set with 33 orders (CCBR33), another set with 66 orders (CCBR66) and another one with 132 orders (CCBR132). 
Figure 1 illustrates the delivery region of CODR instances and both the pickup and delivery regions of UCBR and CCBR instances. 
5.4 Different clusters on both regions The pickup region is organized in 5 clusters with different sizes and different numbers of locations and the delivery region is divided in 10 clusters also with An adapted heuristic approach for a clustered vrp with loading constraints 255 10050 100 0 0 -50-100 -50 -100 50 Fig. 1 Illustration of CODR, UCBR and CCBR instances different sizes and different numbers of locations. 
The clusters of the pickup region correspond to the following squares: [0,5]×[0,5], [0,5]×[15,20], [20,25]×[0,5], [20,30]×[25,35], [60,80]×[70,90], and the clusters of the delivery region to: [0,5]×[0,5], [20,30]×[5,10], [20,25]×[30,40], [0,5]×[10,15], [0,10]×[30,40], [50,55]×[50,55], [70,80]×[55,60], [70,75]×[80,90], [50,55]×[60,65], [50,60]× [80,90]. 
For an illustrative instance with 33 orders, the number of pickup locations generated on each cluster is 7, 7, 6, 5, 8, respectively, and there will be 6 delivery locations in the last cluster ([50,60]×[80,90]) and 3 on all the other ones. 
For instances with twice or four times this size (66 or 132 orders) the number of locations on each cluster is multiplied by 2 or by 4 accordingly. 
Both depots are centrally located at (50,50). 
In this case the customers are then organized among many concentration regions with different extensions and different number of locations, and each region has a particular and distinctive structure. 
This set of instances represent the real situation in which the pickup region has several production or processing centers and the delivery locations are spread along a large area with small concentration regions with different sizes. 
This set of instances will be referred to as DCBR (Different Clusters on Both Regions). 
The location of the customers and their distances are quite heterogeneous in these instances and this fact usually makes them be more difficult to solve. 
256 A. Felipe et al. 50 100 50 0 0100 (a) pickup region 50 100 50 0 0100 (b)delivery region Fig. 2 Illustration of DCBR instances. 
a Pickup region. 
b Delivery region We will consider one set with 33 orders (DCBR33), another set with 66 orders (DCBR66) and another one with 132 orders (DCBR132). 
Figure 2 illustrates the pickup region (a) and the delivery region (b) of DCBR instances. 
5.5 Small clusters only on the delivery region The pickup locations of the instances of this set are uniformly generated on the square [0,100]×[0,100] and the delivery locations are organized in 3 clusters contained on the squares [95,100]×[0,5], [95,100]×[95,100] and [0,5]×[95,100]. 
Each cluster contains the same number of locations, that are randomly generated on the corresponding square, and the number of clusters on each region and the number of locations on each cluster is the same as in the set CODR; however, the main difference is that now the squares on which the delivery clusters are contained are much smaller than the ones considered in the set CODR, and thus the distances between locations belonging to the same cluster are significatively smaller than the distances between locations belonging to different clusters. 
The depot of the pickup region is centrally located at (50,50) and the depot of the delivery region is located at the origin (0,0). 
This set of instances represents the real situation in which the items to be transported must be collected at several locations demanding the pickup of products that are to be processed in a production center. 
The delivery region then contains a few production centers, each of which has several processing plants. 
The processing plants of each production center are very close to each other, being located in a small square, but they are usually far away from the plants of the other production centers. 
This set of instances will be referred to as SCODR (Small Clusters Only on the Delivery Region). 
In this kind of instances it seems natural to perform all deliveries associated to the same cluster consecutively, since traveling between clusters is much more expensive. 
Intuitively, this fact should make these instances more easy to solve, but in practice sometimes this is not the case. 
An adapted heuristic approach for a clustered vrp with loading constraints 257 50 100 100 50 0 0 Fig. 3 Illustration of SCODR instances We will consider one set with 33 orders (SCODR33), another set with 66 orders (SCODR66) and another one with 132 orders (SCODR132). 
Figure 3 illustrates the delivery region of SCODR instances. 
6 Computational results The instances introduced in Sect. 
5 are solved using both the original heuristic EXTVNS introduced in Felipe et al. (2011) and the adapted heuristic C-VNS presented in Sects. 
2–4. 
In this section the results obtained from these experiments are presented and discussed and the performance of the two algorithms are analyzed. 
The proposed algorithms are implemented in Fortran 95 and run on a 1.6 Ghz processor. 
For each of the five different instance configurations introduced in Sect. 
5, three sizes are considered, with 33, 66 and 132 orders. 
The 15 sets considered, with 10 instances each, are available at http://www.espaciotd.jazztel.es/dtspms.htm. 
The only parameter to be tuned on the C-VNS heuristic is ρ, representing the probability of using at each iteration of the search the neighborhood structures considering swap moves between orders of different clusters. 
The calibration of ρ has been performed on a small set of instances generated specifically for this purpose in which we have created instances of the five types introduced in the previous section. 
The parameter has been varied in the set ρ ∈{0, 0.05, 0.20, 0.35, 0.5, 0.75, 1.0} and after the calibration the following choices were made: ρ = 0.5 for CODR instances, ρ = 0.75 for UCBR instances, ρ = 0.0 for SCODR instances and ρ = 0.35 for DCBR instances. 
For CCBR instances the calibration process provided quite similar results for all tested values of the parameter, suggesting that these instances are somehow 258 A. Felipe et al. Table 1 Cost of best solutions of instances with 33 orders Problem / Instance set CODR UCBR CCBR DCBR SCODR R00 1970 1708 1557 619 973 R01 1977 1673 1517 608 950 R02 1888 1699 1517 628 917 R03 1901 1707 1542 638 935 R04 1935 1782 1558 620 913 R05 1940 1715 1534 620 959 R06 1868 1624 1534 632 877 R07 1773 1707 1537 619 884 R08 1910 1670 1540 627 944 R09 1969 1757 1542 632 930 different from the others. 
We will confirm this guess later when analyzing the full results on the proposed instances: we will conclude that CCBR instances are much easier to solve than the others and thus the algorithm performs similarly for any value of ρ. For the instances with 33 orders both algorithms showed a similar performance. 
All the solutions obtained by both algorithms with 10 s of computing time are less than 1.5 % away from the best known solutions, with an average gap of 0.7 %; with 3 min all solutions are at most 0.3 % away from the best known, providing the best known solutions in many cases. 
This behavior is mainly due to the small size of these instances, that makes them quite easy to solve by the heuristics. 
Since the solutions provided by both algorithms are so close, we did not find any significative differences between EXT-VNS and C-VNS when applied to so small instances and thus the detailed results obtained with different short running times by the two algorithms are omitted in the paper. 
However, in order to provide data to allow performance comparison, Table 1 shows the costs of the best solutions found for the 33-order instances of each type obtained running C-VNS for 12h. 
In Table 1 each column corresponds to one instance type (following the same order of presentation followed in Sect. 
5) and each row corresponds to one particular instance, from R00 to R09. 
When considering larger instances with 66 and 132 orders, differences do appear between the performance of both considered algorithms. 
In what follows the main results obtained solving 66 and 132 order instances both with EXT-VNS and C-VNS are presented and commented. 
These results are grouped according to each instance configuration type and are presented following the same order of presentation followed in Sect. 
5. Tables 2, 3, 4, 5, 6, 7, 8 and 9 have a similar format. 
The first column reports the names of the instances that are solved and the second column shows the costs of the best known solutions (obtained running C-VNS for 12 h). Columns 3–4, 5–6, 7–8, 9–10 report the results obtained using 10 s and 3, 5 and 10 min of computing time, respectively. 
For each computing time, the first column (EXT) represents the quality of the solution provided by EXT-VNS (calculated by dividing the cost of the solution An adapted heuristic approach for a clustered vrp with loading constraints 259 Table 2 EXT-VNS and C-VNS results on CODR instances with 66 orders Problem Best 10 s 3 min 5 min 10 min EXT C (%) EXT C (%) EXT C (%) EXT C (%) R00-UCBR 2724 1.058 3.38 1.044 −3.93 1.023 −1.65 1.044 −3.89 R01-UCBR 2786 1.121 0.39 1.000 3.37 1.004 −0.29 1.014 0.57 R02-UCBR 2674 1.045 0.30 1.025 1.91 1.032 −0.86 1.003 4.15 R03-UCBR 2720 1.103 −1.95 1.037 −1.51 1.003 0.04 1.019 −1.80 R04-UCBR 2697 1.052 −0.22 1.025 0.56 1.018 1.15 1.006 3.45 R05-UCBR 2838 1.086 −5.57 1.018 2.33 1.015 2.36 1.026 −0.39 R06-UCBR 2832 1.064 5.30 1.023 −1.06 1.025 −2.01 1.015 0.07 R07-UCBR 2714 1.056 6.30 1.041 −1.44 1.039 −0.48 1.024 −0.88 R08-UCBR 2677 1.062 4.89 1.032 −0.30 1.028 −0.04 1.013 2.58 R09-UCBR 2637 1.088 −6.14 1.021 0.34 1.022 0.61 1.028 0.49 Average 1.074 0.67 1.027 0.03 1.021 −0.12 1.019 0.44 Table 3 EXT-VNS and C-VNS results on CODR instances with 132 orders Problem Best 10 s 3 min 5 min 10 min EXT C (%) EXT C (%) EXT C (%) EXT C (%) R00-UCBR 4451 1.099 −1.82 1.092 −3.91 1.039 −3.84 1.021 4.11 R01-UCBR 4216 1.164 −1.35 1.116 −3.06 1.069 1.02 1.088 −1.30 R02-UCBR 4333 1.115 3.67 1.071 −1.73 1.022 4.13 1.027 1.22 R03-UCBR 4407 1.091 3.99 1.048 1.97 1.065 1.45 1.031 −3.83 R04-UCBR 4186 1.161 4.83 1.116 −2.34 1.084 1.31 1.081−4.54 R05-UCBR 4327 1.118 4.23 1.071 −5.13 1.052 0.72 1.060 −3.91 R06-UCBR 4463 1.081 9.81 1.088 −4.06 1.035 1.17 1.015 −1.03 R07-UCBR 4273 1.128 1.61 1.073 −3.11 1.087 −1.24 1.025 3.21 R08-UCBR 4342 1.146 4.38 1.037 4.21 1.052 −5.00 1.026 4.26 R09-UCBR 4444 1.162 −6.64 1.058 −1.46 1.013−0.14 1.049 0.50 Average 1.126 2.27 1.077 −1.86 1.052 −0.04 1.042 −0.13 provided by the heuristic by the cost of the best known) and the second column (C) represents the percentage quality difference between the solutions provided by EXTVNS and C-VNS. 
If e and c represent, respectively, the cost of the solutions given by EXT-VNS and C-VNS, the percentage quality difference is calculated as 100(c−e) e , and thus negative percentages represent savings achieved by C-VNS. 
Finally, the corresponding average values are shown in the last row. 
The results on the instances with Clusters Only on the Delivery Region (CODR) are presented in Tables 2 and 3. For 66-order instances, EXT-VNS performs slightly better than C-VNS when using 10 s or 10min, while for medium running times the differences are very small. 
For 132-order instances EXT-VNS performs better when using only 10s, but using 3 min the situation changes and C-VNS outperforms EXT-VNS, 260 A. Felipe et al. Table 4 EXT-VNS and C-VNS results on UCBR instances with 66 orders Problem Best 10 s 3min 5 min 10 min EXT C (%) EXT C (%) EXT C (%) EXT C (%) R00-UCBR 2224 1.205 −4.32 1.079 −0.18 1.030 0.99 1.066 −2.11 R01-UCBR 2256 1.104 −5.01 1.004 0.18 1.027 −0.31 1.023 −0.04 R02-UCBR 2205 1.085 4.49 1.071 −3.58 1.001 −0.09 1.000 0.05 R03-UCBR 2276 1.081 −0.57 1.075 −2.94 1.046 −0.70 1.051 −4.75 R04-UCBR 2309 1.157 −6.89 1.042 1.30 1.010 0.56 1.028 −2.04 R05-UCBR 2189 1.150 −11.01 1.061 −2.60 1.049 −2.97 1.016 1.14 R06-UCBR 2323 1.201 −1.46 1.059 −1.08 1.068 0.22 1.056 −3.19 R07-UCBR 2191 1.083 3.88 1.071 −5.02 1.062 1.10 1.061 0.05 R08-UCBR 2289 1.065 8.61 1.022 2.97 1.080 −0.92 1.016 3.54 R09-UCBR 2268 1.135 −9.74 1.057 −4.76 1.063 −5.42 1.034 −1.32 Average 1.127 −2.20 1.054 −1.57 1.044 −0.76 1.035 −0.87 Table 5 EXT-VNS and C-VNS results on UCBR instances with 132 orders Problem Best 10 s 3 min 5 min 10 min EXT C (%) EXT C (%) EXT C (%) EXT C (%) R00-UCBR 3401 1.085 2.32 1.096 −0.85 1.044 1.15 1.071 −1.38 R01-UCBR 3560 1.072 0.59 1.055 −3.57 1.029 1.52 0.994 2.56 R02-UCBR 3554 1.077 1.74 1.050 0.08 1.060 −3.24 1.031 −2.00 R03-UCBR 3436 1.124 3.61 1.139 −3.93 1.096 −4.45 1.081 0.32 R04-UCBR 3498 1.200 −5.97 1.061 5.29 1.053 2.94 1.054 0.46 R05-UCBR 3440 1.108 −3.58 1.055 −1.42 1.066 0.00 1.008 3.78 R06-UCBR 3486 1.109 0.66 1.073 0.95 1.055 −3.33 1.062 −4.85 R07-UCBR 3523 1.134 −2.44 1.104 0.40 1.080 −3.75 1.053 2.53 R08-UCBR 3469 1.118 −0.40 1.089 2.68 1.069 1.59 1.083 2.31 R09-UCBR 3504 1.092 1.08 1.067 −1.86 1.080 −1.94 0.989 6.79 Average 1.112 −0.24 1.079 −0.22 1.063 −0.95 1.043 1.05 while for larger running times the differences are again very small. 
Considering these results it is difficult to state which heuristic is superior on CODR instances. 
These instances have clusters only on one of the regions of the problem, and that may be one reason why the new version C-VNS is not able to provide significative improvements over EXT-VNS. 
The results on the instances with Uncoupled Clusters on Both Regions (UCBR) are presented in Tables 4 and 5. For 66-order instances C-VNS clearly outperforms EXT-VNS, showing improving averages with all running times tested. 
For 132-order, only with 10 min EXT-VNS performs better than C-VNS, while C-VNS clearly outperforms EXT-VNS with 10 s, 3 and 5 min. 
Considering these results we conclude An adapted heuristic approach for a clustered vrp with loading constraints 261 Table 6 EXT-VNS and C-VNS results on DCBR instances with 66 orders Problem Best 10s 3 min 5 min 10 min EXT C (%) EXT C (%) EXT C (%) EXT C (%) R00-UCBR 768 1.079 −0.65 1.040 1.30 1.065 4.30 1.000 0.00 R01-UCBR 804 1.147 −1.49 1.047 −1.49 1.011 0.37 1.037 −2.49 R02-UCBR 749 1.055 10.81 1.043 3.07 1.011 1.34 1.023 0.93 R03-UCBR 804 1.162 −8.58 1.077 −3.98 1.088 −6.84 1.045 −1.99 R04-UCBR 793 1.106 −3.28 1.019 2.14 1.048 −1.01 1.032 −1.51 R05-UCBR 800 1.104 6.25 1.114 −5.50 1.006 0.00 1.046 −4.25 R06-UCBR 790 1.147 −4.68 1.080 1.39 1.032 0.00 1.009 −0.89 R07-UCBR 797 1.088 −0.75 1.063 −5.90 1.030 −0.38 1.000 3.51 R08-UCBR 774 1.099 1.68 1.097 −0.26 1.099 0.78 1.074 −5.68 R09-UCBR 800 1.043 2.00 1.011 5.25 1.010 2.88 1.034 −1.13 Average 1.103 0.30 1.054 −0.40 1.040 0.14 1.030 −1.35 Table 7 EXT-VNS and C-VNS results on DCBR instances with 132 orders Problem Best 10 s 3 min 5 min 10 min EXT C (%) EXT C (%) EXT C (%) EXT C (%) R00-UCBR 1154 1.143 −2.69 1.033 1.99 1.030 3.38 1.021 0.35 R01-UCBR 1116 1.195 0.99 1.155 −4.21 1.102 7.71 1.061 1.25 R02-UCBR 1067 1.331 −4.59 1.206 0.37 1.156 2.44 1.164 −4.69 R03-UCBR 1198 1.170 −7.93 1.042 −2.42 1.035 6.59 1.050 −7.35 R04-UCBR 1165 1.101 1.63 1.036 7.98 1.062 −0.86 1.058 −4.89 R05-UCBR 1122 1.199 −0.71 1.143 −3.83 1.107 −2.32 1.111 −1.07 R06-UCBR 1056 1.245 1.70 1.162 6.25 1.190 2.94 1.166 −1.80 R07-UCBR 1098 1.163 −7.56 1.003 7.10 1.087 −0.73 1.047 2.64 R08-UCBR 1162 1.121 10.67 1.008 10.93 1.121 −11.02 1.049 −6.45 R09-UCBR 1147 1.067 9.86 1.055 −0.61 1.000 4.36 1.001 5.93 Average 1.174 0.14 1.084 2.36 1.089 1.25 1.073 −1.61 that C-VNS performs better than the original heuristic EXT-VNS on UCBR instances. 
These instances have a much stronger clustered structure than the previous set of instances considered, since there exist clusters in both regions and pickup and delivery locations can be placed at any cluster, and this can be a reason why C-VNS is now able to provide improvements over EXT-VNS. 
On the instances with Coupled Clusters on Both Regions (CCBR) both EXT-VNS and C-VNS performed very similarly, showing average percentage differences around 0.25 % and most of them below 0.15%. 
As a consequence, the results for 66 and 132 order CCBR instances are not informative at all and thus we decided to omit them in the paper. 
This behavior can be explained by the fact that, since the clusters of both regions of these instances are coupled, it is natural that all orders belonging to 262 A. Felipe et al. Table 8 EXT-VNS and C-VNS results on SCODR instances with 66 orders Problem Best 10 s 3 min 5 min 10 min EXT C (%) EXT C (%) EXT C (%) EXT C (%) R00-UCBR 1162 1.215 −2.58 1.038 −1.38 1.016 0.17 1.072 −6.71 R01-UCBR 1196 1.035 −0.59 1.011 −0.08 1.009 0.17 1.018 −0.08 R02-UCBR 1142 1.171 −8.23 1.011 −1.05 1.002 1.66 1.077 −7.18 R03-UCBR 1150 1.113 −4.61 1.011 2.70 1.019 −2.00 1.009 −0.09 R04-UCBR 1141 1.130 −9.90 1.013−0.09 1.012 0.61 1.015 −1.49 R05-UCBR 1203 1.068 −0.42 1.017 −0.25 1.021 1.25 1.017 1.16 R06-UCBR 1200 1.049 0.83 1.033 −2.50 1.018 −1.25 1.007 0.00 R07-UCBR 1141 1.015 1.93 1.018 −0.61 1.013 1.31 1.004 0.88 R08-UCBR 1125 1.129 8.89 1.101 −9.42 1.031 −1.96 1.012 −0.98 R09-UCBR 1135 1.072 5.37 1.001 0.26 1.011 −0.62 1.000 2.38 Average 1.100 −0.93 1.026 −1.24 1.015 −0.06 1.023 −1.21 Table 9 EXT-VNS and C-VNS results on SCODR instances with 132 orders Problem Best 10 s 3 min 5 min 10min EXT C (%) EXT C (%) EXT C (%) EXT C (%) R00-UCBR 1686 1.206 9.19 1.142 0.65 1.106 2.25 1.129 0.71 R01-UCBR 1679 1.270 −5.18 1.214 −2.62 1.120 6.91 1.165 −12.27 R02-UCBR 1762 1.168 −1.76 1.110 −3.41 1.008 3.23 1.078 −5.16 R03-UCBR 1615 1.199 6.56 1.152 0.19 1.037 2.85 1.111 3.65 R04-UCBR 1541 1.219 11.23 1.250 −0.65 1.151 2.79 1.125 −3.63 R05-UCBR 1576 1.190 2.86 1.194 −2.73 1.140 4.12 1.056 5.52 R06-UCBR 1683 1.151 −0.36 1.126 0.00 1.058 4.04 1.106 0.36 R07-UCBR 1614 1.180 −2.29 1.071 2.73 1.153 −5.27 1.064 −3.47 R08-UCBR 1572 1.303 8.14 1.237 −1.02 1.146 8.52 1.035 6.36 R09-UCBR 1679 1.103 9.29 1.033 10.66 1.054 7.15 1.045 −1.19 Average 1.199 3.77 1.153 0.38 1.097 3.66 1.091 −0.91 the same cluster are always visited consecutively, and thus these instances are much easier to solve. 
Indeed, in only 3 min both heuristics provide solutions that are less than 0.8 % worse than the best known 66-order solutions and within 3–5 % worse than the best known 132-order solutions. 
These results confirm what was suggested during the calibration process, in which we observed that C-VNS showed a similar performance foranyvalueoftheρ parameter: CCBR instances are easier to solve than the ones with other clustered structures and solutions close to the best known can be achieved by all versions of the algorithm. 
The results on the instances with Different Clusters on Both Regions (DCBR) are presented in Tables 6 and 7. With small running times (up to 5 min) both heuristics perform similarly on the 66-order instances and EXT-VNS performs better on the An adapted heuristic approach for a clustered vrp with loading constraints 263 132-order instances. 
However, if a large enough running time is considered (10 min), C-VNS outperforms EXT-VNS both for 66 and 132 order instances. 
Considering these results we can conclude that C-VNS is superior to EXT-VNS if a large enough running time is allowed. 
DCBR instances have clusters with heterogeneous sizes and shapes in both regions, and this fact could give an idea about why it takes time to take advantage of this complicated structure. 
The results on the instances with Small Clusters Only on the Delivery Regions (SCODR) are presented in Tables 8 and 9. On the 66-order instances C-VNS clearly outperforms EXT-VNS, while on the 132-order instances we need to consider a large running time of 10 min to allow C-VNS obtain improving results. 
Considering these results we can conclude again that C-VNS is superior to EXT-VNS if a large enough running time is allowed, and also for any running time on 66 order-instances. 
Here it is interesting to note that, according to the calibration phase, we fix ρ = 0.00, meaning that swap moves between clusters are not used during the search. 
This choice matches the intuition obtained from the illustration of Fig. 3 , where we can see that the clusters of SCODR instances are very small and thus the distances between locations of different clusters are much longer than distances between locations of the same clusters (that in many cases are really close to 0). Then, moves between clusters are much less useful, and thus it is better to concentrate on more interesting moves. 
Note that having ρ = 0.00 does not mean that it is not possible to make moves between clusters, since they can be performed by other neighborhood structures different from swap move structures. 
It is also worth noting that some of the best known solutions that were obtained by EXT-VNS could be improved by using C-EXT (and many were the same). 
On the instances with 33 orders only 4 best known solutions could be improved, but on the instances with 66 orders 8 of the best known solutions were improved and on the largest instances with 132 orders the number of improved best known solutions increased to 20. All results presented up to now are related to instances with 3 available stacks with tight capacity, because that was the case in the real application that motivated the problem and in the original instances that were generated (see Petersen and Madsen 2009). 
However, since the number of stacks could change according to the characteristics of the vehicles that are used, some experiments were also performed on the same sets of instances considering 2 and 4 available stacks with tight capacity to evaluate the performance of the proposed heuristics on different situations. 
In the case of 2 stacks both EXT-VNS and C-VNS performed similarly, providing solutions that are less than 0.5 % away in average. 
This behavior may be due to the fact that having fewer stacks the structure of the problem is more constrained and thus the search process has less flexibility. 
In the case of 4 stacks, as it was pointed out in the literature (Lusby et al. 2010; Petersen et al. 2010), the problem should be easier to solve, and thus we decided to test the heuristics with shorter running times, only considering 10 s and 3 min. 
Here we found that EXT-VNS and C-VNS do perform differently, and to show this behavior Table 10 presents the average percentage cost differences between the solutions provided by both algorithms for each instance type and 66 and 132 orders (again results with only 33 orders are omitted). 
As before, negative percentages represent savings achieved by C-VNS. 
On the one hand, on CCBR instances the differences between 264 A. Felipe et al. Table 10 Average percentage cost improvement on instances with 66 and 132 orders and 4 stacks 66 orders 132 orders 10s (%) 3m (%) 10s(%) 3m(%) CODR 0.03 −0.97 0.80 −5.75 UCBR 1.54 −1.09 −0.79 −2.09 CCBR 0.78 0.14 1.08 0.54 DCBR 0.22 −1.37 3.04 −3.15 SCODR −1.20 0.55 1.14 −1.90 the heuristics performance are larger now than in the case with 3 stacks, having that EXT-VNS outperforms C-VNS. 
On the other hand, although it can be observed that in only 10 s C-VNS is not able to outperform EXT-VNS, considering 3min of running time C-VNS provides quite large savings for CORD, UCBR, DCBR and SCODR instances, above all for 132 orders, were savings range between 1.90 and 5.75 %. To sum up, considering all results for 33, 66 and 132 orders and 2, 3 and 4 available stacks it can be stated that C-VNS is able to introduce important savings over EXT-VNS on instances with a structure containing uncoupled clusters, clusters of different sizes and shapes and small sized clusters, while it is not clear which heuristic is superior on instances with medium sized clusters only on one region or with coupled clusters on both regions. 
7 Conclusions and future work In this paper we approach one interesting combined routing and loading problem of the literature, called the Double Traveling Salesman Problem with Multiple Stacks (DTSPMS). 
The combination of these two factors is crucial to optimize the overall transportation process in logistics, although it leads to very hard combinatorial problems as the DTSPMS. 
This paper presents new ideas to adapt heuristics to deal with real life situations in which the customers are not uniformly distributed on the pickup or delivery regions of the problem. 
As a result, an adapted and effective heuristic based on a VNS framework using a new procedure to generate initial solutions and several improved neighborhood structures is proposed. 
These new features could be extended to other similar routing problems, taking into account their particular characteristics to adapt the provided general framework appropriately. 
Five new sets of instances to better represent some realistic situations are generated and used to evaluate the performance of the new heuristic. 
Extensive computational results are provided, analyzing the effect of the structures of the instances considered and showing on which sets of instances the new heuristic is able to produce improving solutions. 
An interesting line of future research could be the study of the problem of building the clustered structure of a general instance of a routing problem (the DTSPMS in particular) in which the locations of the customers are known but there is not any previous information about how they could be organized in clusters. 
This is a complicated problem that could be approached in several ways, taking into account that the approach used to build the clusters may influence the performance of the heuristics applied to the routing problem. 
An adapted heuristic approach for a clustered vrp with loading constraints 265 Acknowledgments This work was partially supported by the Government of Spain through grants UCMBSCH2008-910707, TIN2009-07901 and MTM2009-14039-C06-03. 
References Alba M, Cordeau J-F, Dell’Amico M, Iori MA (2011) Branch-and-cut algorithm for the double traveling salesman problem with multiple stacks. 
INFORMS J Comput (to appear) Carrabs F, Cerulli R, Cordeau J-F (2007) An additive branch-and-bound algorithm for the pickup and delivery traveling salesman problem with LIFO or FIFO loading. 
INFOR Inf Syst Oper Res 45(4):223–238 Carrabs F, Cordeau J-F, Laporte G (2007) Variable neighborhood search for the pickup and delivery traveling salesman problem with LIFO loading. 
INFORMS J Comput 19:618–632 Carrabs F, Cerulli R, Speranza MG (2010) A branch-and-bound algorithm for the double TSP with two stacks. 
Technical Report 4, DMI, University of Salerno, Italy (available on line) Cassani L, Righini G (2004) Heuristic algorithms for the TSP with rear-loading. 
In: 35th annual conference of the Italian operational research society, AIRO XXXV, Lecce, Italy Cassaza M, Ceselli A, Nunkesser M (2009) Efficient algorithms for the double traveling salesman problem with multiple stacks. 
In: Proceedings of Cologne twente workshop, Paris, France Cordeau J-F, Iori M, Laporte G, Salazar-González J (2010) A branch-and-cut algorithm for the pickup and delivery traveling salesman problem with LIFO loading. 
Networks 55(1):46–59 Cotè JF, Gendreau M, Potvin JY (2012) Large neighborhood search for the pickup and delivery traveling salesman problem with multiple stacks. 
Networks. 
doi:10.1002/net.20448 Doerner DF, Fuellerer G, Hartl RF, Gronalt M, Iori M (2007) Metaheuristics for the vehicle routing problem with loading constraints. 
Networks 49(4):294–307 Felipe A, Ortuño MT, Tirado G (2009) The double traveling salesman problem with multiple stacks: a variable neighborhood search approach. 
Comput Oper Res 36:2983–2993 Felipe A, Ortuño MT, Tirado G (2011) Using intermediate infeasible solutions to approach vehicle routing problems with precedence and loading constraints. 
Eur J Oper Res 211:66–75 Gendreau M, Iori M, Laporte G, Martello S (2006) A heuristic algorithm for a routing and container loading problem. 
Transp Sci 40:342–350 Gendreau M, Iori M, Laporte G, Martello S (2008) A tabu search heuristic for the vehicle routing problem with two-dimensional loading constraints. 
Networks 51(1):4–18 Iori M, Salazar-González J, Vigo D (2007) An exact approach for the vehicle routing problem with twodimensional loading constraints. 
Transp Sci 41(2):253–264 Lusby R, Larsen J, Ehrgott M, Ryan D (2010) An exact method for the double TSP with multiple stacks. 
Int Trans Oper Res 17:637–652 Petersen HL, Archetti C, Speranza MG (2010) Exact solutions to the double travelling salesman problem with multiple stacks. 
Networks 56(4):229–243 Petersen HL, Madsen OBG (2009) The double travelling salesman problem with multiple stacks—formulation and heuristic solution approaches. 
Eur J Oper Res 198(1):139–147 Copyright of 4OR is the property of Springer Science & Business Media B.V. and its content may not be copied or emailed to multiple sites or posted to a listserv without the copyright holder's express written permission. 
However, users may print, download, or email articles for individual use. 