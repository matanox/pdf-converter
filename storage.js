// Generated by CoffeeScript 1.6.3
var crypto, dbms, fs, logging, riak, util;

util = require('./util');

logging = require('./logging');

riak = require('riak-js').getClient({
  host: "localhost",
  port: "8098"
});

fs = require('fs');

crypto = require('crypto');

dbms = require('rethinkdb');

exports.store = function(bucket, filename, file, docLogger) {
  var fileContent, hash, hasher;
  util.timelog("storing file to clustered storage");
  hasher = crypto.createHash('md5');
  fileContent = fs.readFileSync(file);
  util.timelog("hashing input file");
  hasher.update(fileContent);
  hash = hasher.digest('hex');
  util.timelog("hashing input file");
  console.log(hash);
  dbms.connect({
    host: 'localhost',
    port: 28015
  }, function(err, connection) {
    if (err) {
      throw err;
    }
    return dbms.db('test').tableCreate('file_hashes').run(connection, function(err, result) {
      if (err) {
        throw err;
      }
      return console.log(JSON.stringify(result, null, 2));
    });
  });
  return riak.save(bucket, filename, fileContent, function(error) {
    util.timelog("storing file to clustered storage", docLogger);
    if (error != null) {
      return docLogger.error("failed storing file to clustered storage");
    }
  });
};

exports.fetch = function(bucket, filename, callback) {
  util.timelog("fetching file from clustered storage");
  return riak.get(bucket, filename, function(error, fileContent) {
    if (error != null) {
      console.error("failed fetching file from clustered storage");
      return false;
    } else {
      util.timelog("fetching file from clustered storage");
      console.log(fileContent);
      return callback(fileContent);
    }
  });
  /*
  riak.get('pdf', 'tXqIBGiBR5aMgxBQBOVY', (error, fileContent) ->
    if error
      logging.log(error)
    else
      logging.log(fileContent)
    fs.writeFileSync('back-from-riak.pdf', fileContent))
  */

};
