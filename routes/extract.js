// Generated by CoffeeScript 1.6.3
var css, ctype, filterImages, filterZeroLengthText, html, isImage, model, output, timer, util;

require("fs");

util = require("../util");

timer = require("../timer");

css = require("../css");

html = require("../html");

model = require("../model");

output = require("../output");

ctype = require("../ctype");

isImage = function(text) {
  return util.startsWith(text, "<img ");
};

filterImages = function(ourDivRepresentation) {
  var div, filtered, _i, _len;
  filtered = [];
  for (_i = 0, _len = ourDivRepresentation.length; _i < _len; _i++) {
    div = ourDivRepresentation[_i];
    if (!isImage(div.text)) {
      filtered.push(div);
    }
  }
  return filtered;
};

filterZeroLengthText = function(ourDivRepresentation) {
  var div, filtered, _i, _len;
  filtered = [];
  for (_i = 0, _len = ourDivRepresentation.length; _i < _len; _i++) {
    div = ourDivRepresentation[_i];
    if (!(div.text.length === 0)) {
      filtered.push(div);
    }
  }
  return filtered;
};

exports.go = function(req, res) {
  var abbreviations, augmentEachDiv, connect_token_group, cssClass, div, divTokens, divsNum, divsWithStyles, documentQuantifiers, endsSpaceDelimited, frequencies, frequency, group, groups, id, inputStylesMap, iterator, name, outputHtml, path, rawHtml, rawRelevantDivs, style, styles, token, tokens, word, wordFrequencies, wordFrequenciesArray, _i, _j, _k, _l, _len, _len1, _len10, _len11, _len12, _len2, _len3, _len4, _len5, _len6, _len7, _len8, _len9, _m, _n, _o, _p, _q, _r, _ref, _s, _t, _u;
  util.timelog('Extraction from html stage A');
  path = '../local-copies/' + 'html-converted/';
  name = req.query.name;
  rawHtml = fs.readFileSync(path + name + '/' + name + ".html").toString();
  inputStylesMap = css.simpleFetchStyles(rawHtml, path + name + '/');
  rawRelevantDivs = html.removeOuterDivs(rawHtml);
  divsWithStyles = (function() {
    var _i, _len, _results;
    _results = [];
    for (_i = 0, _len = rawRelevantDivs.length; _i < _len; _i++) {
      div = rawRelevantDivs[_i];
      _results.push(html.representDiv(div));
    }
    return _results;
  })();
  divsWithStyles = filterImages(divsWithStyles);
  for (_i = 0, _len = divsWithStyles.length; _i < _len; _i++) {
    div = divsWithStyles[_i];
    html.stripSpanWrappers(div);
  }
  divsWithStyles = filterZeroLengthText(divsWithStyles);
  divsNum = divsWithStyles.length;
  endsSpaceDelimited = 0;
  console.log(endsSpaceDelimited);
  console.log(endsSpaceDelimited / divsNum);
  if ((endsSpaceDelimited / divsNum) < 0.3) {
    augmentEachDiv = true;
  } else {
    augmentEachDiv = false;
  }
  divTokens = [];
  for (_j = 0, _len1 = divsWithStyles.length; _j < _len1; _j++) {
    div = divsWithStyles[_j];
    tokens = html.tokenize(div.text);
    for (_k = 0, _len2 = tokens.length; _k < _len2; _k++) {
      token = tokens[_k];
      switch (token.metaType) {
        case 'regular':
          token.styles = div.styles;
      }
    }
    divTokens.push(tokens);
  }
  tokens = [];
  for (_l = 0, _len3 = divTokens.length; _l < _len3; _l++) {
    div = divTokens[_l];
    for (_m = 0, _len4 = div.length; _m < _len4; _m++) {
      token = div[_m];
      tokens.push(token);
    }
  }
  tokens.reduce(function(x, y) {
    if (y.metaType === 'delimiter') {
      y.styles = x.styles;
    }
    return y;
  });
  for (_n = 0, _len5 = tokens.length; _n < _len5; _n++) {
    token = tokens[_n];
    if (token.metaType === 'regular') {
      if (token.text.length === 0) {
        throw "Error - zero length text in data";
      }
    }
  }
  if (tokens.length === 0) {
    console.log("No text was extracted from input");
    throw "No text was extracted from input";
  }
  for (_o = 0, _len6 = tokens.length; _o < _len6; _o++) {
    token = tokens[_o];
    token.finalStyles = {};
    token.positionInfo = {};
    _ref = token.styles;
    for (_p = 0, _len7 = _ref.length; _p < _len7; _p++) {
      cssClass = _ref[_p];
      styles = css.getFinalStyles(cssClass, inputStylesMap);
      if (styles != null) {
        for (_q = 0, _len8 = styles.length; _q < _len8; _q++) {
          style = styles[_q];
          if (util.isAnyOf(style.property, css.positionData)) {
            token.positionInfo[style.property] = style.value;
          } else {
            token.finalStyles[style.property] = style.value;
          }
        }
      }
      if (util.objectPropertiesCount(token.finalStyles) === 0) {
        console.warn('No final styles applied to token');
        console.dir(token);
      }
    }
  }
  util.first(tokens).lineLocation = 'opener';
  tokens.reduce(function(a, b) {
    if (parseInt(b.positionInfo.bottom) < parseInt(a.positionInfo.bottom)) {
      if (parseInt(b.positionInfo.left) < parseInt(a.positionInfo.left)) {
        b.lineLocation = 'opener';
        a.lineLocation = 'closer';
      }
    }
    return b;
  });
  util.last(tokens).lineLocation = 'closer';
  iterator = function(tokens, iterationFunc) {
    var a, b, i, _results;
    i = 1;
    _results = [];
    while (i < tokens.length) {
      a = tokens[i - 1];
      b = tokens[i];
      _results.push(i = i + iterationFunc(a, b, i, tokens));
    }
    return _results;
  };
  console.log(tokens.length);
  iterator(tokens, function(a, b, i, tokens) {
    var newDelimiter;
    if (b.lineLocation === 'opener') {
      if (a.lineLocation === 'closer') {
        if (a.metaType === 'regular') {
          if (util.endsWith(a.text, '-')) {
            a.text = a.text.slice(0, -1);
            a.text = a.text.concat(b.text);
            tokens.splice(i, 1);
            return 0;
          } else {
            if (a.text === 'approach' && b.text === 'to') {
              console.log('found at ' + i);
            }
            newDelimiter = {
              'metaType': 'delimiter'
            };
            newDelimiter.styles = a.styles;
            newDelimiter.finalStyles = a.finalStyles;
            tokens.splice(i, 0, newDelimiter);
            return 2;
          }
        }
      }
    }
    return 1;
  });
  tokens.reduce(function(a, b, index) {
    if (a.metaType === 'regular' && b.metaType === 'regular') {
      if (util.endsWith(a.text, '-')) {
        a.text = a.text.slice(0, -1);
        a.text = a.text.concat(b.text);
        tokens.splice(index, 1);
        return a;
      }
    }
    return b;
  });
  util.timelog('Extraction from html stage A');
  id = 0;
  for (_r = 0, _len9 = tokens.length; _r < _len9; _r++) {
    token = tokens[_r];
    token.id = id;
    id += 1;
  }
  for (_s = 0, _len10 = tokens.length; _s < _len10; _s++) {
    token = tokens[_s];
    if (token.metaType === 'regular') {
      token.calculatedProperties = [];
      if (util.pushIfTrue(token.calculatedProperties, ctype.testPureUpperCase(token.text))) {
        console.log('pushed one computed style');
      }
    }
  }
  util.timelog('Sentence tokenizing');
  connect_token_group = function(_arg) {
    var group, token;
    group = _arg.group, token = _arg.token;
    group.push(token);
    return token.partOf = group;
  };
  abbreviations = 0;
  groups = [];
  group = [];
  for (_t = 0, _len11 = tokens.length; _t < _len11; _t++) {
    token = tokens[_t];
    if (token.type = 'regular') {
      connect_token_group({
        group: group,
        token: token
      });
      if (token.text === '.') {
        if (!(group.length > (1 + 1))) {
          abbreviations += 1;
        } else {
          groups.push(group);
          group = [];
        }
      }
    }
  }
  if (group.length !== 0) {
    groups.push(group);
  }
  util.timelog('Sentence tokenizing');
  documentQuantifiers = {};
  documentQuantifiers['sentences'] = groups.length;
  documentQuantifiers['period-trailed-abbreviations'] = abbreviations;
  console.dir(documentQuantifiers);
  frequencies = function(objectsArray, filterKey, filterBy, property, parentProperty) {
    var array, key, map, object, val, value, _len12, _ref1, _u;
    map = {};
    for (_u = 0, _len12 = objectsArray.length; _u < _len12; _u++) {
      object = objectsArray[_u];
      if (object[filterKey] === filterBy) {
        _ref1 = object[parentProperty];
        for (key in _ref1) {
          value = _ref1[key];
          if (key === property) {
            value = parseFloat(value);
            if (map[value] != null) {
              map[value] += 1;
            } else {
              map[value] = 1;
            }
          }
        }
      }
    }
    array = [];
    for (key in map) {
      val = map[key];
      array.push({
        key: key,
        val: val
      });
    }
    return array.sort(function(a, b) {
      return parseFloat(b.val) - parseFloat(a.val);
    });
  };
  frequencies(tokens, 'metaType', 'regular', 'left', 'positionInfo');
  frequencies(tokens, 'metaType', 'regular', 'font-size', 'finalStyles');
  util.timelog('Calculating word frequencies');
  wordFrequencies = {};
  for (_u = 0, _len12 = tokens.length; _u < _len12; _u++) {
    token = tokens[_u];
    if (!(token.metaType === 'regular')) {
      continue;
    }
    word = token.text;
    if (wordFrequencies[word] != null) {
      wordFrequencies[word] += 1;
    } else {
      wordFrequencies[word] = 1;
    }
  }
  util.timelog('Calculating word frequencies');
  util.timelog('Sorting frequencies');
  wordFrequenciesArray = [];
  for (word in wordFrequencies) {
    frequency = wordFrequencies[word];
    wordFrequenciesArray.push({
      word: word,
      frequency: frequency
    });
  }
  wordFrequenciesArray.sort(function(a, b) {
    return parseInt(b.frequency) - parseInt(a.frequency);
  });
  util.timelog('Sorting frequencies');
  outputHtml = html.buildOutputHtml(tokens, inputStylesMap);
  return output.serveOutput(outputHtml, name, res);
};
