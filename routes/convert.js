// Generated by CoffeeScript 1.6.3
var docMeta, exec, executable, executalbeParams, fs, getFromUrl, logging, storage, util, winston;

util = require('../util');

logging = require('../logging');

docMeta = require('../docMeta');

storage = require('../storage');

getFromUrl = require('request');

fs = require('fs');

require('stream');

winston = require('winston');

exec = require("child_process").exec;

executable = "pdf2htmlEX";

executalbeParams = "--embed-css=0 --embed-font=0 --embed-image=0 --embed-javascript=0";

exports.go = function(req, res) {
  var baseFileName, convert, docLogger, docLoggername, fetch, inkUrl, redirectToExtract, redirectToShowHtml;
  fetch = function(inkUrl, baseFileName, callOnSuccess) {
    var download, outFile;
    outFile = "../local-copies/" + "pdf/" + baseFileName + ".pdf";
    return download = getFromUrl(inkUrl, function(error, response, body) {
      if (!error && response.statusCode === 200) {
        return callOnSuccess(outFile, docLogger);
      } else {
        console.log("fetching from InkFilepicker returned http status " + response.statusCode);
        if (error) {
          return logging.log("fetching from InkFilepicker returned error " + error);
        }
      }
    }).pipe(fs.createWriteStream(outFile));
  };
  redirectToShowHtml = function(redirectString) {
    logging.log("Passing html result to next level handler, by redirecting to: " + redirectString);
    res.writeHead(301, {
      Location: redirectString
    });
    return res.end();
  };
  redirectToExtract = function(redirectString) {
    logging.log("Passing html result to next level handler, by redirecting to: " + redirectString);
    res.writeHead(301, {
      Location: redirectString
    });
    return res.end();
  };
  convert = function(localCopy, docLogger) {
    var execCommand, name, outFolder;
    name = localCopy.replace("../local-copies/pdf/", "").replace(".pdf", "");
    storage.store("pdf", name, localCopy, docLogger);
    docMeta.storePdfMetaData(localCopy, docLogger);
    logging.log("Starting the conversion from pdf to html");
    util.timelog("Conversion to html");
    execCommand = executable + " ";
    outFolder = "../local-copies/" + "html-converted/";
    execCommand += localCopy + " " + executalbeParams + " " + "--dest-dir=" + outFolder + "/" + name;
    logging.log(execCommand);
    return exec(execCommand, function(error, stdout, stderr) {
      logging.log(executable + "'s stdout: " + stdout);
      logging.log(executable + "'s stderr: " + stderr);
      if (error !== null) {
        return logging.log(executable + "'sexec error: " + error);
      } else {
        util.timelog("Conversion to html");
        return redirectToExtract("http://localhost/" + "extract" + "?" + "name=" + name + "&" + "docLogger=" + docLogger);
      }
    });
  };
  inkUrl = req.query.tempLocation;
  baseFileName = inkUrl.replace("https://www.filepicker.io/api/file/", "");
  docLogger = new winston.Logger;
  docLoggername = baseFileName + '.log';
  docLogger.add(winston.transports.File, {
    filename: docLoggername
  });
  console.log('Logging handling for ' + baseFileName + ' in ' + docLoggername);
  return fetch(inkUrl, baseFileName, convert);
};
