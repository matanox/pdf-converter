// Generated by CoffeeScript 1.6.3
var crypto, docMeta, exec, executable, executalbeParams, fs, logging, output, redirectToExtract, redirectToShowHtml, riak, storage, util;

util = require('../util');

logging = require('../logging');

docMeta = require('../docMeta');

storage = require('../storage');

require('stream');

exec = require("child_process").exec;

riak = require('riak-js').getClient({
  host: "localhost",
  port: "8098"
});

fs = require('fs');

crypto = require('crypto');

output = require('../output');

executable = "pdf2htmlEX";

executalbeParams = "--embed-css=0 --embed-font=0 --embed-image=0 --embed-javascript=0";

exports.go = function(localCopy, docLogger, req, res) {
  var fileContent, hash, hasher, name;
  name = localCopy.replace("../local-copies/pdf/", "").replace(".pdf", "");
  req.session.name = name;
  hasher = crypto.createHash('md5');
  fileContent = fs.readFileSync(localCopy);
  util.timelog("hashing input file");
  hasher.update(fileContent);
  hash = hasher.digest('hex');
  util.timelog("hashing input file");
  console.log(hash);
  return riak.get('html', hash, function(error, formerName) {
    var execCommand, outFolder;
    if (error != null) {
      util.timelog("from upload to serving");
      docMeta.storePdfMetaData(localCopy, docLogger);
      storage.store("pdf", name, fileContent, docLogger);
      util.timelog("Conversion to html");
      docLogger.info("Starting the conversion from pdf to html");
      execCommand = executable + " ";
      outFolder = "../local-copies/" + "html-converted/";
      execCommand += localCopy + " " + executalbeParams + " " + "--dest-dir=" + outFolder + "/" + name;
      docLogger.info(execCommand);
      return exec(execCommand, function(error, stdout, stderr) {
        docLogger.info(executable + "'s stdout: " + stdout);
        docLogger.info(executable + "'s stderr: " + stderr);
        if (error !== null) {
          return docLogger.error(executable + "'sexec error: " + error);
        } else {
          util.timelog("Conversion to html", docLogger);
          riak.save('html', hash, name, function(error) {
            util.timelog("storing file hash to clustered storage", docLogger);
            if (error != null) {
              return docLogger.error("failed storing file hash to clustered storage");
            }
          });
          return require('./extract').go(req, name, res, docLogger);
        }
      });
    } else {
      console.log('input file has already passed pdf2htmlEX conversion - skipping conversion');
      return require('./extract').go(req, formerName, res, docLogger);
    }
  });
};

redirectToShowHtml = function(redirectString) {
  docLogger.info("Passing html result to next level handler, by redirecting to: " + redirectString);
  res.writeHead(301, {
    Location: redirectString
  });
  return res.end();
};

redirectToExtract = function(redirectString) {
  docLogger.info("Passing html result to next level handler, by redirecting to: " + redirectString);
  res.writeHead(301, {
    Location: redirectString
  });
  return res.end();
};
