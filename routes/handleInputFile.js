// Generated by CoffeeScript 1.6.3
var convert, extract, fetch, fs, getFromUrl, initDocLogger, setOutFile, util, winston;

convert = require('./convert');

extract = require('./extract');

util = require('../util');

getFromUrl = require('request');

fs = require('fs');

winston = require('winston');

fetch = function(inkUrl, outFile, docLogger, req, res, callOnSuccess) {
  var download;
  return download = getFromUrl(inkUrl, function(error, response, body) {
    if (!error && response.statusCode === 200) {
      return callOnSuccess(outFile, docLogger, req, res);
    } else {
      console.log("fetching from InkFilepicker returned http status " + response.statusCode);
      if (error) {
        return docLogger.info("fetching from InkFilepicker returned error " + error);
      }
    }
  }).pipe(fs.createWriteStream(outFile));
};

setOutFile = function(baseFileName) {
  return "../local-copies/" + "pdf/" + baseFileName + ".pdf";
};

initDocLogger = function(name) {
  var docLogger, docLoggerNameBase, now;
  docLogger = new winston.Logger;
  now = new Date();
  docLoggerNameBase = 'logs/' + name + '-' + now.toISOString() + '.log';
  /*
  docLogger.add(winston.transports.File, {
    filename: docLoggerNameBase + '.json',
    json: true
    timestamp: true})
  */

  docLogger = new winston.Logger({
    transports: [
      new winston.transports.File({
        name: 'file#json',
        filename: docLoggerNameBase + '.json',
        json: true,
        timestamp: true
      }), new winston.transports.File({
        name: 'file#text',
        filename: docLoggerNameBase,
        json: false,
        timestamp: true
      })
    ],
    exitOnError: false
  });
  console.log('Logging handling of ' + name + ' in ' + docLoggerNameBase + '*');
  return docLogger;
};

exports.go = function(req, res) {
  var baseFileName, docLogger, inkUrl, outFile;
  if (req.query.inkUrl != null) {
    inkUrl = req.query.inkUrl;
    baseFileName = inkUrl.replace('https://www.filepicker.io/api/file/', '');
    docLogger = initDocLogger(baseFileName);
    docLogger.info('logger started');
    req.session.docLogger = docLogger;
    outFile = setOutFile(baseFileName);
    fetch(inkUrl, outFile, docLogger, req, res, convert.go);
  }
  if (req.query.localLocation != null) {
    baseFileName = req.query.localLocation.replace('.pdf', '');
    docLogger = initDocLogger(baseFileName);
    docLogger.info('logger started');
    outFile = setOutFile(baseFileName);
    return convert.go(outFile, docLogger, req, res);
  }
};
