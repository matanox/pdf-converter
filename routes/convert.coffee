util = require '../util'
logging = require '../logging' 
docMeta = require '../docMeta'
storage = require '../storage'
getFromUrl = require 'request'
exec = require("child_process").exec
fs = require("fs")
require "stream"

executable = "pdf2htmlEX"
executalbeParams = "--embed-css=0 --embed-font=0 --embed-image=0 --embed-javascript=0"

#
# * Handles the conversion from pdf to html, and forwards to next stage.
# 

#
# * Fetches the upload from Ink File Picker (writing it into local file).
# * If it works - invoke the passed along callback function.
# 
fetch = (inkUrl, callOnSuccess) ->
  
  #outFile = inkUrl + '.pdf';
  outFile = "../local-copies/" + "pdf/" + inkUrl.replace("https://www.filepicker.io/api/file/", "") + ".pdf"
  download = getFromUrl(inkUrl, (error, response, body) ->
    if (not error and response.statusCode is 200)
        callOnSuccess(outFile)
    else
      console.log "fetching from InkFilepicker returned http status " + response.statusCode
      if error
        logging.log "fetching from InkFilepicker returned error " + error  if error
  ).pipe(fs.createWriteStream(outFile))

exports.go = (req, res) ->
  redirectToShowHtml = (redirectString) ->
    logging.log "Passing html result to next level handler, by redirecting to: " + redirectString
    res.writeHead 301,
      Location: redirectString

    res.end()
  redirectToExtract = (redirectString) ->
    logging.log "Passing html result to next level handler, by redirecting to: " + redirectString
    res.writeHead 301,
      Location: redirectString

    res.end()
  convert = (localCopy) ->
    name = localCopy.replace("../local-copies/pdf/", "").replace(".pdf", "") # extract the file name
    storage.store "pdf", name, localCopy
    docMeta.storePdfMetaData localCopy
    
    #docMeta.storePdfMetaData(name, localCopy)
    
    # 
    #		 * html2pdfEX doesn't have an option to pipe the output, so passing its output around
    #		 * is just a bit clumsier than it could have been. We use a directory structure one level up
    #		 * of this project, to store originals and conversion artifacts, as a way to share them with
    #		 * another web server running on the same server.
    #		 *
    #		 * For the output of html2pdfEX for a given input PDF document, we create a folder using its 
    #		 * randomly generated file name generated by html2pdfEX, and in it we store all the conversion 
    #		 * outputs for that file - the html, and accompanying files such as css, fonts, images, 
    #		 * and javascript that the html2pdfEX output needs to have. 
    #		 
    logging.log "Starting the conversion from pdf to html"
    util.timelog "Conversion to html"
    
    #res.send('Please wait...'');
    execCommand = executable + " "
    
    #outFileName = name + '.html'
    outFolder = "../local-copies/" + "html-converted/"
    execCommand += localCopy + " " + executalbeParams + " " + "--dest-dir=" + outFolder + "/" + name
    logging.log execCommand
    exec execCommand, (error, stdout, stderr) ->
      logging.log executable + "'s stdout: " + stdout
      logging.log executable + "'s stderr: " + stderr
      if error isnt null
        logging.log executable + "'sexec error: " + error
      else
        
        # KEEP THIS FOR LATER: redirectToShowHtml('http://localhost:8080/' + 'serve-original-as-html/' + name + "/" + outFileName)
        # redirectToShowRaw('http://localhost/' + 'extract' +'?file=' + name + "/" + outFileName)
        util.timelog "Conversion to html"
        redirectToExtract "http://localhost/" + "extract" + "?name=" + name

  fetch req.query.tempLocation, convert  # fetch the upload and pass control to the convert function
