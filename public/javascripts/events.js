// Generated by CoffeeScript 1.6.3
var enableContext, go, reload, startAfterPrerequisites, startEventMgmt;

Array.prototype.unique = function() {
  var key, output, value, _i, _ref, _results;
  output = {};
  for (key = _i = 0, _ref = this.length; 0 <= _ref ? _i < _ref : _i > _ref; key = 0 <= _ref ? ++_i : --_i) {
    output[this[key]] = this[key];
  }
  _results = [];
  for (key in output) {
    value = output[key];
    _results.push(value);
  }
  return _results;
};

startAfterPrerequisites = function() {
  var ajaxRequest;
  ajaxRequest = new XMLHttpRequest();
  ajaxRequest.onreadystatechange = function() {
    var inject, script;
    if (ajaxRequest.readyState === 4) {
      if (ajaxRequest.status === 200) {
        console.log('Ajax fetching javascript succeeded.');
        console.log('Proceeding to start processing after fetched javascript will have been fully loaded');
        script = document.createElement("script");
        script.type = "text/javascript";
        inject = ajaxRequest.responseText + '\n' + 'go()';
        script.innerHTML = inject;
        return document.getElementsByTagName("head")[0].appendChild(script);
      } else {
        return console.error('Failed loading prerequisite library via ajax. Aborting...');
      }
    }
  };
  ajaxRequest.open('GET', 'javascripts/external/color.js', true);
  return ajaxRequest.send(null);
};

startEventMgmt = function() {
  var Color, baseMarkColor, container, contextmenuHandler, dragElements, endDrag, inDrag, inDragMaybe, leftDown, leftDrag, logDrag, mark, mousemoveHandler, noColor, page, rightDown, rightDrag;
  console.log("Setting up events...");
  container = document.getElementById('hookPoint');
  page = document.body;
  leftDown = false;
  rightDown = false;
  leftDrag = false;
  rightDrag = false;
  inDragMaybe = false;
  inDrag = false;
  dragElements = new Array();
  logDrag = function() {
    console.log(leftDown);
    console.log(rightDown);
    console.log(leftDrag);
    return console.log(rightDrag);
  };
  Color = net.brehaut.Color;
  baseMarkColor = Color('#FAA058');
  noColor = Color('rgba(0, 0, 0, 0)');
  mark = function(elements, type) {
    var currentColor, currentCssBackground, element, i, newColor, _i, _ref, _ref1;
    for (i = _i = _ref = Math.min.apply(null, elements), _ref1 = Math.max.apply(null, elements); _ref <= _ref1 ? _i <= _ref1 : _i >= _ref1; i = _ref <= _ref1 ? ++_i : --_i) {
      element = document.getElementById(i);
      currentCssBackground = window.getComputedStyle(element, null).getPropertyValue('background-color');
      if (currentCssBackground != null) {
        console.log(currentCssBackground);
        currentColor = Color().fromObject(currentCssBackground);
      } else {
        currentColor = noColor;
      }
      switch (type) {
        case 'on':
          if (currentColor.toCSSHex() === noColor.toCSSHex()) {
            newColor = baseMarkColor;
          } else {
            newColor = currentColor.darkenByRatio(0.05);
          }
          element.style.backgroundColor = newColor.toCSS();
          break;
        case 'off':
          switch (currentColor.toCSSHex()) {
            case baseMarkColor.toCSSHex():
              newColor = noColor;
              element.style.backgroundColor = newColor.toCSS();
              break;
            case noColor.toCSSHex():
              break;
            default:
              newColor = currentColor.lightenByRatio(0.05);
              element.style.setProperty('background-color', newColor.toCSS());
          }
      }
    }
    /*
    # Further highlight more the words actually hovered,
    # but not those that were only part of the selected range
    for element in elements
      document.getElementById(element).style.background = '#FAAC58'
    */

    return dragElements = new Array();
  };
  endDrag = function() {
    var inDrabMaybe;
    container.removeEventListener("mousemove", mousemoveHandler, false);
    inDrag = false;
    inDrabMaybe = false;
    console.log("drag ended");
    if (dragElements.length > 0) {
      if (leftDrag) {
        leftDrag = false;
        mark(dragElements.unique(), 'on');
      }
      if (rightDrag) {
        rightDrag = false;
        return mark(dragElements.unique(), 'off');
      }
    }
  };
  mousemoveHandler = function(event) {
    if (inDragMaybe === true) {
      inDrag = true;
      if (leftDown) {
        leftDrag = true;
      }
      if (rightDown) {
        rightDrag = true;
      }
      console.log('dragging');
      inDragMaybe = false;
    }
    if (inDrag && (event.target !== container)) {
      return dragElements.push(event.target.id);
    }
  };
  contextmenuHandler = function(event) {
    var remove;
    remove = function(node) {
      return node.parentNode.removeChild(node);
    };
    event.preventDefault();
    event.stopPropagation();
    event.stopImmediatePropagation();
    console.log("right-click event captured");
    console.log(event.target);
    return false;
  };
  container.addEventListener("contextmenu", contextmenuHandler);
  container.onclick = function(event) {
    event.preventDefault();
    event.stopPropagation();
    event.stopImmediatePropagation();
    console.log("click event captured");
    return false;
  };
  container.ondblclick = function(event) {
    event.preventDefault();
    event.stopPropagation();
    event.stopImmediatePropagation();
    console.log("double-click event captured");
    return false;
  };
  page.onmouseup = function(event) {
    if (event.button === 0) {
      leftDown = false;
    } else {
      rightDown = false;
    }
    inDragMaybe = false;
    if (inDrag === true) {
      endDrag();
    }
    return false;
  };
  page.onmousedown = function(event) {
    event.preventDefault();
    event.stopPropagation();
    event.stopImmediatePropagation();
    console.log("mouse-down event captured");
    if (event.button === 0) {
      leftDown = true;
    } else {
      rightDown = true;
    }
    if (event.target !== container) {
      inDragMaybe = true;
      container.addEventListener("mousemove", mousemoveHandler, false);
    }
    return false;
  };
  return container.onselectstart = function(event) {
    event.preventDefault();
    event.stopPropagation();
    event.stopImmediatePropagation();
    console.log("select-start event captured");
    return false;
  };
};

go = function() {
  return window.onload = function() {
    return startEventMgmt();
  };
};

startAfterPrerequisites();

reload = function() {
  var script;
  script = document.createElement("script");
  script.type = "text/javascript";
  script.src = "javascripts/events.js";
  document.getElementsByTagName("head")[0].appendChild(script);
  startEventMgmt();
  return console.log('reloaded');
};

enableContext = function() {
  return document.getElementById("hookPoint").removeEventListener("contextmenu", contextmenuHandler);
};
