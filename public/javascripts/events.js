// Generated by CoffeeScript 1.6.3
var dragElements, inDrag, inDragMaybe, leftDown, mark, reload, startEventMgmt;

Array.prototype.unique = function() {
  var key, output, value, _i, _ref, _results;
  output = {};
  for (key = _i = 0, _ref = this.length; 0 <= _ref ? _i < _ref : _i > _ref; key = 0 <= _ref ? ++_i : --_i) {
    output[this[key]] = this[key];
  }
  _results = [];
  for (key in output) {
    value = output[key];
    _results.push(value);
  }
  return _results;
};

leftDown = false;

inDragMaybe = false;

inDrag = false;

dragElements = new Array();

mark = function(elements) {
  var element, i, _i, _j, _len, _ref, _ref1;
  for (i = _i = _ref = Math.min.apply(null, elements), _ref1 = Math.max.apply(null, elements); _ref <= _ref1 ? _i <= _ref1 : _i >= _ref1; i = _ref <= _ref1 ? ++_i : --_i) {
    document.getElementById(i).style.background = '#FAA058';
  }
  for (_j = 0, _len = elements.length; _j < _len; _j++) {
    element = elements[_j];
    document.getElementById(element).style.background = '#FAAC58';
  }
  return dragElements = new Array();
};

startEventMgmt = function() {
  var container, endDrag, mousemoveHandler, page, remove;
  console.log("Setting up events...");
  container = document.getElementById('hookPoint');
  page = document.body;
  remove = function(node) {
    return node.parentNode.removeChild(node);
  };
  endDrag = function() {
    var inDrabMaybe;
    container.removeEventListener("mousemove", mousemoveHandler, false);
    inDrag = false;
    inDrabMaybe = false;
    console.log("drag ended");
    return mark(dragElements.unique());
  };
  mousemoveHandler = function(event) {
    if (inDragMaybe === true) {
      inDrag = true;
      console.log('dragging');
      inDragMaybe = false;
    }
    if (inDrag && (event.target !== container)) {
      return dragElements.push(event.target.id);
    }
  };
  container.oncontextmenu = function(event) {
    event.preventDefault();
    event.stopPropagation();
    event.stopImmediatePropagation();
    console.log("right-click event captured");
    console.log(event.target);
    if (event.target !== event.currentTarget) {
      remove(event.target);
    }
    return false;
  };
  container.onclick = function(event) {
    event.preventDefault();
    event.stopPropagation();
    event.stopImmediatePropagation();
    console.log("click event captured");
    return false;
  };
  container.ondblclick = function(event) {
    event.preventDefault();
    event.stopPropagation();
    event.stopImmediatePropagation();
    console.log("double-click event captured");
    return false;
  };
  page.onmouseup = function(event) {
    if (event.button === 0) {
      leftDown = false;
    }
    inDragMaybe = false;
    if (inDrag === true) {
      endDrag();
    }
    return false;
  };
  page.onmousedown = function(event) {
    event.preventDefault();
    event.stopPropagation();
    event.stopImmediatePropagation();
    console.log("mouse-down event captured");
    if (event.button === 0) {
      leftDown = true;
      if (event.target !== container) {
        inDragMaybe = true;
        container.addEventListener("mousemove", mousemoveHandler, false);
      }
    }
    return false;
  };
  return container.onselectstart = function(event) {
    event.preventDefault();
    event.stopPropagation();
    event.stopImmediatePropagation();
    console.log("select-start event captured");
    return false;
  };
};

window.onload = function() {
  return startEventMgmt();
};

reload = function() {
  var script;
  script = document.createElement("script");
  script.type = "text/javascript";
  script.src = "javascripts/events.js";
  document.getElementsByTagName("head")[0].appendChild(script);
  startEventMgmt();
  return console.log('reloaded');
};
