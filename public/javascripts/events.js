// Generated by CoffeeScript 1.6.3
var dragElements, endDrag, inDrag, mark, mousemoveHandler;

Array.prototype.unique = function() {
  var key, output, value, _i, _ref, _results;
  output = {};
  for (key = _i = 0, _ref = this.length; 0 <= _ref ? _i < _ref : _i > _ref; key = 0 <= _ref ? ++_i : --_i) {
    output[this[key]] = this[key];
  }
  _results = [];
  for (key in output) {
    value = output[key];
    _results.push(value);
  }
  return _results;
};

inDrag = false;

dragElements = new Array();

mark = function(elements) {
  var element, i, _i, _j, _len, _ref, _ref1;
  for (i = _i = _ref = Math.min.apply(null, elements), _ref1 = Math.max.apply(null, elements); _ref <= _ref1 ? _i <= _ref1 : _i >= _ref1; i = _ref <= _ref1 ? ++_i : --_i) {
    document.getElementById(i).style.background = '#FAAB58';
  }
  for (_j = 0, _len = elements.length; _j < _len; _j++) {
    element = elements[_j];
    document.getElementById(element).style.background = '#FAAC58';
  }
  return dragElements = new Array();
};

endDrag = function() {
  hookPoint.removeEventListener("mousemove", mousemoveHandler, false);
  inDrag = false;
  console.log("drag ended");
  return mark(dragElements.unique());
};

mousemoveHandler = function(event) {
  if ((inDrag === true) && (event.target.id !== 'hookPoint')) {
    return dragElements.push(event.target.id);
  }
};

window.onload = function() {
  var container, hookPoint, remove;
  console.log("Setting up events...");
  hookPoint = document.getElementById("hookPoint");
  container = document.body;
  remove = function(node) {
    return node.parentNode.removeChild(node);
  };
  hookPoint.oncontextmenu = function(event) {
    event.preventDefault();
    event.stopPropagation();
    event.stopImmediatePropagation();
    console.log("right-click event captured");
    console.log(event.target);
    if (event.target !== event.currentTarget) {
      remove(event.target);
    }
    return false;
  };
  hookPoint.onclick = function(event) {
    event.preventDefault();
    event.stopPropagation();
    event.stopImmediatePropagation();
    console.log("click event captured");
    return false;
  };
  hookPoint.ondblclick = function(event) {
    event.preventDefault();
    event.stopPropagation();
    event.stopImmediatePropagation();
    console.log("double-click event captured");
    return false;
  };
  container.onmouseup = function(event) {
    if (inDrag === true) {
      endDrag();
    }
    return false;
  };
  container.onmousedown = function(event) {
    event.preventDefault();
    event.stopPropagation();
    event.stopImmediatePropagation();
    console.log("(mouse-down event captured. skipping listing the target object)");
    if ((event.button === 0) && (event.target.id !== 'hookPoint')) {
      inDrag = true;
      hookPoint.addEventListener("mousemove", mousemoveHandler, false);
    }
    return false;
  };
  return container.onselectstart = function(event) {
    event.preventDefault();
    event.stopPropagation();
    event.stopImmediatePropagation();
    console.log("select-start event captured");
    return false;
  };
};
