// Generated by CoffeeScript 1.4.0
var contains, endsWith, extractCssFileNames, startsWith, strip;

endsWith = function(string, match) {
  return string.indexOf(match) === string.length - match.length;
};

startsWith = function(string, match) {
  return string.indexOf(match) === 0;
};

contains = function(string, match) {
  return string.indexOf(match) !== -1;
};

exports.removeOuterDivs = function(string) {
  var regex;
  regex = new RegExp('<div((?!div).)*</div>', 'g');
  return string.match(regex);
};

exports.simpleGetDivContent = function(xmlNode) {
  var content;
  content = xmlNode.substr(0, xmlNode.length - "</div>".length);
  content = content.slice(content.indexOf(">") + 1);
  console.log(xmlNode);
  console.log(content + "\n" + "\n");
  return content;
};

strip = function(string, prefix, suffix) {
  if (!startsWith(string, prefix)) {
    throw "Cannot strip string of the supplied prefix";
  }
  if (!endsWith(string, suffix)) {
    throw "Cannot strip string of the supplied suffix";
  }
  return string.slice(string.indexOf(prefix) + prefix.length, string.indexOf(suffix));
};

extractCssFileNames = function(string) {
  var cssFiles, linkStripper, prefix, regex, stylesheetElem, suffix;
  prefix = '<link rel="stylesheet" href="';
  suffix = '"/>';
  regex = new RegExp(prefix + '.*' + suffix, 'g');
  linkStripper = function(string) {
    return strip(string, prefix, suffix);
  };
  cssFiles = (function() {
    var _i, _len, _ref, _results;
    _ref = string.match(regex);
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      stylesheetElem = _ref[_i];
      _results.push(linkStripper(stylesheetElem));
    }
    return _results;
  })();
  return cssFiles;
};

exports.simpleGetCssFiles = function(rawHtml, path) {
  var cssContents, cssFilePaths, file, name;
  cssFilePaths = (function() {
    var _i, _len, _ref, _results;
    _ref = extractCssFileNames(rawHtml);
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      name = _ref[_i];
      _results.push((function(name) {
        return path + name;
      })(name));
    }
    return _results;
  })();
  console.log(cssFilePaths);
  cssContents = (function() {
    var _i, _len, _results;
    _results = [];
    for (_i = 0, _len = cssFilePaths.length; _i < _len; _i++) {
      file = cssFilePaths[_i];
      _results.push((function(file) {
        return fs.readFileSync(file).toString();
      })(file));
    }
    return _results;
  })();
  return console.log(cssContents);
};
