// Generated by CoffeeScript 1.6.3
var baseSieve, createBaseSieve, markers, util, verbex;

util = require('./util');

verbex = require('verbal-expressions');

exports.anything = verbex().then('...').maybe('.').maybe('.').anything();

markers = {};

markers.array = [];

baseSieve = [];

exports.baseSieve = baseSieve;

exports.createDocumentSieve = function(baseSieve) {
  var baseSieveRow, k, sieve, sieveRow, _i, _len;
  sieve = [];
  for (_i = 0, _len = baseSieve.length; _i < _len; _i++) {
    baseSieveRow = baseSieve[_i];
    sieveRow = {};
    for (k in baseSieveRow) {
      sieveRow[k] = baseSieveRow[k];
      sieve.push(sieveRow);
    }
  }
  util.logObject(sieve);
  return sieve;
};

createBaseSieve = function(callback) {
  var add, marker, markerId, seiveRow, tokenizeMarker, _i, _len, _ref;
  add = function(string, addition) {
    return string + addition;
  };
  tokenizeMarker = function(marker) {
    return [];
  };
  markerId = 0;
  util.timelog('Markers visualization');
  _ref = markers.array;
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    marker = _ref[_i];
    seiveRow = {};
    seiveRow.markerTokens = tokenizeMarker(marker);
    seiveRow.markerId = markerId;
    baseSieve.push(seiveRow);
    markerId += 1;
  }
  util.timelog('Markers visualization');
  util.logObject(baseSieve);
  return callback();
};

exports.load = function(callback) {
  var csvConverter, csvFile, csvToJsonConverter;
  util.timelog('Loading markers');
  csvToJsonConverter = require('csvtojson').core.Converter;
  csvConverter = new csvToJsonConverter();
  csvConverter.on("end_parsed", function(jsonFromCss) {
    markers.array = jsonFromCss.csvRows;
    util.timelog('Sorting markers');
    markers.array.sort(function(a, b) {
      if (a.WordOrPattern > b.WordOrPattern) {
        return 1;
      } else {
        return -1;
      }
    });
    util.timelog('Sorting markers');
    util.timelog('Loading markers');
    return createBaseSieve(callback);
  });
  csvFile = './markers.csv';
  return csvConverter.from(csvFile);
};
