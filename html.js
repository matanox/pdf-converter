// Generated by CoffeeScript 1.4.0
var parseCssClasses, util;

util = require('./util');

exports.removeOuterDivs = function(string) {
  var regex;
  regex = new RegExp('<div((?!div).)*</div>', 'g');
  return string.match(regex);
};

parseCssClasses = function(xmlNode) {
  var cssClasses, cssClassesString, regex;
  regex = new RegExp("<div class=\".*?\"", 'g');
  cssClassesString = xmlNode.match(regex);
  cssClassesString = util.strip(cssClassesString[0], "<div class=\"", "\"");
  regex = new RegExp("\\b\\S+?\\b", 'g');
  cssClasses = cssClassesString.match(regex);
  return cssClasses;
};

exports.representDiv = function(xmlNode) {
  var styles, text;
  text = util.parseElementText(xmlNode);
  styles = parseCssClasses(xmlNode);
  return {
    text: text,
    styles: styles
  };
};

exports.stripSpanWrappers = function(div) {
  var spanBegin, spanEnd;
  spanBegin = new RegExp('<span.*?>', 'g');
  spanEnd = new RegExp('</span>', 'g');
  div.text = div.text.replace(spanBegin, '');
  return div.text = div.text.replace(spanEnd, '');
};

exports.tokenize = function(styledText) {
  var endsWithPunctuation, i, punctuation, spaceDelimitedTokens, startsWithPunctuation, token, tokens, tokensWithStyle, _i, _j, _len, _ref;
  punctuation = [',', ':', ';', '.', ')'];
  spaceDelimitedTokens = styledText.text.split(/\s/);
  tokens = [];
  for (_i = 0, _len = spaceDelimitedTokens.length; _i < _len; _i++) {
    token = spaceDelimitedTokens[_i];
    endsWithPunctuation = util.endsWithAnyOf(token, punctuation);
    if (!endsWithPunctuation) {
      tokens.push(token);
    } else {
      tokens.push(token.slice(0, token.length - 2));
      tokens.push(token.slice(token.length - 1));
    }
  }
  punctuation = ['('];
  for (i = _j = 0, _ref = tokens.length - 1; 0 <= _ref ? _j <= _ref : _j >= _ref; i = 0 <= _ref ? ++_j : --_j) {
    startsWithPunctuation = util.startsWithAnyOf(tokens[i], punctuation);
    if (startsWithPunctuation) {
      tokens.splice(i, 1, token.charAt(0), token.slice(token.slice(1)));
    }
  }
  tokensWithStyle = (function() {
    var _k, _len1, _results;
    _results = [];
    for (_k = 0, _len1 = tokens.length; _k < _len1; _k++) {
      token = tokens[_k];
      _results.push({
        'text': token,
        'styles': styledText.styles
      });
    }
    return _results;
  })();
  return tokensWithStyle;
};
