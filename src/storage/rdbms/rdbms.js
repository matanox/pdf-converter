// Generated by CoffeeScript 1.6.3
var connect, connection, docTables, exec, init, logging, maxDbStrLength, purge, reinit, tables;

logging = require('../../util/logging');

exec = require('../../util/exec');

docTables = [
  {
    name: 'sentences',
    fields: {
      sentence: 'long-string'
    }
  }, {
    name: 'headers',
    fields: {
      header: 'short-string',
      level: 'natural-number'
    }
  }, {
    name: 'abstract',
    fields: {
      abstract: 'long-string'
    }
  }, {
    name: 'title',
    fields: {
      title: 'short-string'
    }
  }
];

docTables.forEach(function(table) {
  return table.type = 'docTable';
});

tables = docTables;

tables.forEach(function(table) {
  switch (table.type) {
    case 'docTable':
      table.fields.docName = 'short-string';
      return table.fields.runID = 'short-string';
  }
});

maxDbStrLength = 20000;

connection = {
  host: 'localhost',
  user: 'articlio',
  database: 'articlio',
  charset: 'utf8'
};

exports.connect = connect = function() {
  var knex;
  return knex = require("knex")({
    dialect: "mysql",
    connection: process.env.DB_CONNECTION_STRING || connection
  });
};

purge = function() {
  var conn;
  conn = connect();
  return tables.forEach(function(table) {
    return conn.schema.dropTableIfExists(table.name);
  });
};

init = function() {
  var conn, table, _i, _len;
  conn = connect();
  for (_i = 0, _len = tables.length; _i < _len; _i++) {
    table = tables[_i];
    conn.schema.createTable(table.name, function(newTable) {
      var field, type, _results;
      _results = [];
      for (field in table.fields) {
        type = table.fields[field];
        switch (type) {
          case 'short-string':
            _results.push(newTable.string(field));
            break;
          case 'long-string':
            _results.push(newTable.string(field, maxDbStrLength));
            break;
          case 'natural-number':
            _results.push(newTable.integer(field));
            break;
          default:
            _results.push(logging.logRed("unidentified field type " + field));
        }
      }
      return _results;
    })["catch"](function(error) {
      logging.logRed(error);
      logging.logRed('database reinitialization failed');
      return false;
    });
  }
  return console.log('database ready for action');
};

exports.reinit = reinit = function() {
  return exec('src/storage/rdbms/rdbms-recreate.sh', null, function(success) {
    if (success) {
      console.log('database definition and database user clean and ready');
      return init();
    } else {
      return console.error('database reinitialization failed - could not recreate database or database user');
    }
  });
};
