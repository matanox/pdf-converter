// Generated by CoffeeScript 1.6.3
var logging;

logging = require('./util/logging');

exports.deriveStructure = function(elements) {
  var element, iterate, maxStructure, _i, _len;
  iterate = function(element, maxStructure) {
    var key, val, _results;
    _results = [];
    for (key in element) {
      val = element[key];
      if (maxStructure[key] == null) {
        switch (typeof val) {
          case "object":
            maxStructure[key] = {};
            _results.push(iterate(val, maxStructure[key]));
            break;
          default:
            _results.push(maxStructure[key] = val);
        }
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };
  maxStructure = {};
  for (_i = 0, _len = elements.length; _i < _len; _i++) {
    element = elements[_i];
    iterate(element, maxStructure);
  }
  logging.cond('token structure:', 'refactor');
  return logging.cond(maxStructure, 'refactor');
};

exports.deriveStructureWithValues = function(elements, variationLimit) {
  var element, iterate, maxStructure, _i, _len;
  if (variationLimit == null) {
    variationLimit = 5;
  }
  iterate = function(element, maxStructure) {
    var duplicateValue, key, val, _results;
    _results = [];
    for (key in element) {
      val = element[key];
      switch (typeof val) {
        case "object":
          if (maxStructure[key] == null) {
            maxStructure[key] = {};
          }
          _results.push(iterate(val, maxStructure[key]));
          break;
        default:
          if (maxStructure[key] != null) {
            if (maxStructure[key].length < variationLimit) {
              duplicateValue = false;
              if (maxStructure[key].indexOf(val) !== -1) {
                duplicateValue = true;
              }
              if (!duplicateValue) {
                maxStructure[key].push(val);
                _results.push(maxStructure[key].sort());
              } else {
                _results.push(void 0);
              }
            } else {
              _results.push(void 0);
            }
          } else {
            _results.push(maxStructure[key] = [val]);
          }
      }
    }
    return _results;
  };
  maxStructure = {};
  for (_i = 0, _len = elements.length; _i < _len; _i++) {
    element = elements[_i];
    iterate(element, maxStructure);
  }
  logging.cond("token structure with possible values (up to " + variationLimit + " unique values per object node):", 'refactor');
  return logging.cond(maxStructure, 'refactor');
};
