// Generated by CoffeeScript 1.6.3
var convert, extract, fetch, fs, getFromUrl, initOutDirs, logging, util, winston;

convert = require('./convert');

extract = require('./extract');

util = require('../util/util');

getFromUrl = require('request');

fs = require('fs');

winston = require('winston');

logging = require('../util/logging');

fetch = function(inkUrl, outFile, docLogger, req, res, callOnSuccess) {
  var download;
  return download = getFromUrl(inkUrl, function(error, response, body) {
    if (!error && response.statusCode === 200) {
      return callOnSuccess(outFile, docLogger, req, res);
    } else {
      console.log("fetching from InkFilepicker returned http status " + response.statusCode);
      if (error) {
        return docLogger.info("fetching from InkFilepicker returned error " + error);
      }
    }
  }).pipe(fs.createWriteStream(outFile));
};

initOutDirs = function(baseFileName) {
  var baseDir;
  baseDir = '../data/pdf';
  util.mkdir(baseDir, '2-as-data');
  return util.mkdir(baseDir, '2-as-text');
};

exports.go = function(req, res) {
  var baseFileName, context, docLogger, fullFileName, inkUrl, outFile;
  if (req.query.localLocation != null) {
    if (!req.query.runID) {
      logging.logRed("Bad request. runID parameter missing in request.");
      res.send(500);
      return;
    }
    fullFileName = req.query.localLocation;
    baseFileName = fullFileName.substring(fullFileName.lastIndexOf('/') + 1).replace('.pdf', '');
    context = {
      runID: req.query.runID,
      name: baseFileName
    };
    logging.logGreen("Started handling input file: " + fullFileName + ". Given run id is: " + context.runID);
    docLogger = util.initDocLogger(baseFileName);
    docLogger.info('logger started');
    initOutDirs(baseFileName);
    convert.go(context, fullFileName, docLogger, req, res);
    return;
  }
  if (req.query.inkUrl != null) {
    inkUrl = req.query.inkUrl;
    baseFileName = inkUrl.replace('https://www.filepicker.io/api/file/', '');
    docLogger = util.initDocLogger(baseFileName);
    docLogger.info('logger started');
    req.session.docLogger = docLogger;
    outFile = setOutFile(baseFileName);
    fetch(inkUrl, outFile, docLogger, req, res, convert.go);
    return;
  }
  logging.logRed("Bad request");
  return res.send(500);
};
