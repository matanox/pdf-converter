// Generated by CoffeeScript 1.6.3
var crypto, dataWriter, docMeta, exec, executable, executalbeParams, fs, logging, redirectToExtract, redirectToShowHtml, riak, storage, util;

util = require('../util/util');

logging = require('../util/logging');

docMeta = require('./docMeta');

storage = require('../storage/simple/storage');

require('stream');

exec = require("child_process").exec;

riak = require('riak-js').getClient({
  host: "localhost",
  port: "8098"
});

fs = require('fs');

crypto = require('crypto');

dataWriter = require('../data/dataWriter');

executable = "pdf2htmlEX";

executalbeParams = "--embed-css=0 --embed-font=0 --embed-image=0 --embed-javascript=0 --decompose-ligature=1";

exports.go = function(context, localCopy, docLogger, req, res) {
  var baseFolder, fileContent, hash, hasher, name, outFolder;
  name = context.name;
  baseFolder = '../data/pdf/1-html/';
  outFolder = baseFolder + name;
  hasher = crypto.createHash('md5');
  fileContent = fs.readFileSync(localCopy);
  util.timelog(context, "hashing input file");
  hasher.update(fileContent);
  hash = hasher.digest('hex');
  util.timelog(context, "hashing input file");
  logging.cond("input file hash is: " + hash, "hash");
  return riak.get('html', hash, function(error, formerName) {
    var execCommand, input;
    if (error != null) {
      util.timelog(context, "from upload to serving");
      docMeta.storePdfMetaData(context, localCopy, docLogger);
      docMeta.storePdfFontsSummary(context, localCopy, docLogger);
      storage.store(context, "pdf", fileContent, docLogger);
      util.timelog(context, "Conversion to html");
      logging.cond("starting the conversion from pdf to html", 'progress');
      util.mkdir(outFolder, name);
      execCommand = executable + " ";
      execCommand += '"' + localCopy + '"' + " " + executalbeParams + " " + "--dest-dir=" + '"' + outFolder + '"';
      dataWriter.write(context, 'pdfToHtml', execCommand);
      return exec(execCommand, function(error, stdout, stderr) {
        var input;
        logging.cond("finished the conversion from pdf to html", 'progress');
        dataWriter.write(context, 'pdfToHtml', executable + "'s stdout: " + stdout);
        dataWriter.write(context, 'pdfToHtml', executable + "'s stderr: " + stderr);
        if (error !== null) {
          dataWriter.write(context, 'pdfToHtml', executable + "'sexec error: " + error);
          console.error("pdf2Html for " + name + " failed with error: \n " + error);
          res.writeHead(505);
          res.write("We are sorry, an unexpected error has occured processing your document");
          return res.end();
        } else {
          /*
          # save the converted-to html as data as well
          outFolderResult = outFolder + name + '/'
          for resultFile in fs.readdirSync(outFolderResult)
            if fs.statSync(outFolderResult + resultFile).isFile() 
              #if util.extensionFilter(resultFile)
              util.mkdir(outFolder)
              util.mkdir(outFolder, name)
              fs.createReadStream(outFolderResult + resultFile).pipe(fs.createWriteStream(outFolderResult + resultFile))
          
          # KEEP THIS FOR LATER: redirectToShowHtml('http://localhost:8080/' + 'serve-original-as-html/' + name + "/" + outFileName)
          # redirectToShowRaw('http://localhost/' + 'extract' +'?file=' + name + "/" + outFileName)
          */

          util.timelog(context, "Conversion to html");
          riak.save('html', hash, name, function(error) {
            if (error != null) {
              return console.log('pdfToHtml', "failed storing file hash for " + name + " to clustered storage");
            } else {

            }
          });
          input = {
            'html': outFolder + '/' + name + ".html",
            'css': outFolder + '/'
          };
          return require('./extract').go(context, req, input, res, docLogger);
        }
      });
    } else {
      logging.cond('input file has already passed pdf2htmlEX conversion - skipping conversion', 'fileMgmt');
      input = {
        'html': baseFolder + formerName + '/' + formerName + ".html",
        'css': baseFolder + formerName + '/'
      };
      return require('./extract').go(context, req, input, res, docLogger);
    }
  });
};

redirectToShowHtml = function(redirectString) {
  docLogger.info("Passing html result to next level handler, by redirecting to: " + redirectString);
  res.writeHead(301, {
    Location: redirectString
  });
  return res.end();
};

redirectToExtract = function(redirectString) {
  docLogger.info("Passing html result to next level handler, by redirecting to: " + redirectString);
  res.writeHead(301, {
    Location: redirectString
  });
  return res.end();
};
