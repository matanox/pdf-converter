// Generated by CoffeeScript 1.6.3
var dataWriter, docsDataDir, dtldiff, fs, getPair, logging, rsplit, util;

fs = require('fs');

util = require('../util/util');

logging = require('../util/logging');

dtldiff = require('dtl');

dataWriter = require('../data/dataWriter');

docsDataDir = dataWriter.docsDataDir;

getPair = function(inputFileName, dataType) {
  var docDataDir, relevantDataFiles;
  console.dir(dataType);
  docDataDir = docsDataDir + '/' + inputFileName + '/';
  relevantDataFiles = fs.readdirSync(docDataDir).filter(function(dataFileName) {
    return dataFileName.indexOf(dataType) === 0;
  });
  if (relevantDataFiles.length > 1) {
    relevantDataFiles.sort().reverse();
    return relevantDataFiles.slice(0, 2).map(function(dataFileName) {
      return docDataDir + dataFileName;
    });
  }
  return void 0;
};

rsplit = function(contentArray, delimiter) {
  var newArray;
  newArray = [];
  contentArray.forEach(function(contentUnit) {
    var split;
    if (contentUnit.indexOf(delimiter) === -1) {
      return newArray.push(contentUnit);
    } else {
      split = contentUnit.split(delimiter);
      split.reduce(function(prev, curr) {
        newArray.push(prev, delimiter);
        return curr;
      });
      newArray.push(split[split.length - 1]);
      return newArray = newArray.filter(function(item) {
        return item !== '';
      });
    }
  });
  return newArray;
};

exports.diff = function(inputFileName, dataType) {
  var beefedArrays, contentArrays, diff, diffentry, differ, filesContent, marks, pair, rawDiff, result, sequence, type, val, _i, _len;
  pair = getPair(inputFileName, dataType);
  if (pair != null) {
    logging.logYellow("comparing " + (pair.join(', ')));
    filesContent = pair.map(function(file) {
      return fs.readFileSync(file, {
        encoding: 'utf8'
      });
    });
    contentArrays = filesContent.map(function(content) {
      return rsplit([content], ' ');
    });
    beefedArrays = contentArrays.map(function(contentArray) {
      return rsplit(contentArray, '\n');
    });
    differ = new dtldiff.Diff(beefedArrays[0], beefedArrays[1]);
    differ.compose();
    marks = {
      'add': '+',
      'del': '-',
      'common': 'C'
    };
    logging.logYellow("edit distance is " + (differ.editdistance()));
    rawDiff = differ.ses(marks);
    diff = [];
    sequence = {
      type: null
    };
    for (_i = 0, _len = rawDiff.length; _i < _len; _i++) {
      diffentry = rawDiff[_i];
      type = (Object.keys(diffentry))[0];
      val = diffentry[type];
      if (type === sequence.type) {
        sequence.vals.push(val);
      } else {
        if (sequence.type !== null) {
          diff.push(sequence);
        }
        sequence = {
          type: type,
          vals: [val]
        };
      }
    }
    diff.push(sequence);
    result = "Shortest edit path \nfrom: " + pair[0] + "\nto:   " + pair[1] + "\n\n";
    diff.filter(function(d) {
      return d.type !== 'C';
    }).forEach(function(d) {
      return result += d.type + d.vals.join('') + '\n';
    });
    dataWriter.write(inputFileName, "diff-" + dataType, result);
    dataWriter.close(inputFileName);
    return logging.logYellow("done comparing " + (pair.join(', ')));
  }
};
